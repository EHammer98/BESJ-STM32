
BESJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be0  08002be0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002be0  08002be0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be0  08002be0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08002c58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08002c58  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac84  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001696  00000000  00000000  0002ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001060c  00000000  00000000  0002d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd60  00000000  00000000  0003dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006545f  00000000  00000000  00049a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aeeeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  000aef3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b54 	.word	0x08002b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002b54 	.word	0x08002b54

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fb96 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f84c 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f936 	bl	80004b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f904 	bl	8000450 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000248:	f000 f8a8 	bl	800039c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800024c:	f000 f8d0 	bl	80003f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //INIT VARIABLES
  player1_x_position = 9;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x84>)
 8000252:	2209      	movs	r2, #9
 8000254:	601a      	str	r2, [r3, #0]
  player2_x_position = 17;
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x88>)
 8000258:	2211      	movs	r2, #17
 800025a:	601a      	str	r2, [r3, #0]
  mushroomTimer = 0;
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <main+0x8c>)
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim16);
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <main+0x90>)
 8000264:	0018      	movs	r0, r3
 8000266:	f001 fbcb 	bl	8001a00 <HAL_TIM_Base_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if (__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000) //runt elke 1khz
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <main+0x90>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <main+0x94>)
 8000272:	8812      	ldrh	r2, [r2, #0]
 8000274:	1a9a      	subs	r2, r3, r2
 8000276:	23fa      	movs	r3, #250	; 0xfa
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	429a      	cmp	r2, r3
 800027c:	d3f5      	bcc.n	800026a <main+0x36>
	{
		Player1_position(Player1_move());
 800027e:	f000 f9d9 	bl	8000634 <Player1_move>
 8000282:	0003      	movs	r3, r0
 8000284:	0018      	movs	r0, r3
 8000286:	f000 f9bd 	bl	8000604 <Player1_position>
		uart_buf_len = sprintf(uart_buf, "%d us\r\n", player1_x_position);
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0x84>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	490f      	ldr	r1, [pc, #60]	; (80002cc <main+0x98>)
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <main+0x9c>)
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fff4 	bl	8002280 <siprintf>
 8000298:	0002      	movs	r2, r0
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <main+0xa0>)
 800029c:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0x90>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <main+0x94>)
 80002a8:	801a      	strh	r2, [r3, #0]
		mushroomTimer++;
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <main+0x8c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <main+0x8c>)
 80002b2:	601a      	str	r2, [r3, #0]
	if (__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000) //runt elke 1khz
 80002b4:	e7d9      	b.n	800026a <main+0x36>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200001dc 	.word	0x200001dc
 80002bc:	200001f0 	.word	0x200001f0
 80002c0:	200001f4 	.word	0x200001f4
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	20000230 	.word	0x20000230
 80002cc:	08002b6c 	.word	0x08002b6c
 80002d0:	200001f8 	.word	0x200001f8
 80002d4:	2000022c 	.word	0x2000022c

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b095      	sub	sp, #84	; 0x54
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2420      	movs	r4, #32
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2330      	movs	r3, #48	; 0x30
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f001 ffc1 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	2310      	movs	r3, #16
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	0018      	movs	r0, r3
 80002f4:	2310      	movs	r3, #16
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f001 ffb9 	bl	8002270 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f001 ffb2 	bl	8002270 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2202      	movs	r2, #2
 8000312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2210      	movs	r2, #16
 800031e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2202      	movs	r2, #2
 8000324:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	22a0      	movs	r2, #160	; 0xa0
 8000330:	0392      	lsls	r2, r2, #14
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	187b      	adds	r3, r7, r1
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fdd5 	bl	8000eec <HAL_RCC_OscConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000346:	f000 f9bf 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	2110      	movs	r1, #16
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2207      	movs	r2, #7
 8000350:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2202      	movs	r2, #2
 8000356:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2101      	movs	r1, #1
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f8d9 	bl	8001520 <HAL_RCC_ClockConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000372:	f000 f9a9 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000376:	003b      	movs	r3, r7
 8000378:	2201      	movs	r2, #1
 800037a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800037c:	003b      	movs	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fa1d 	bl	80017c4 <HAL_RCCEx_PeriphCLKConfig>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800038e:	f000 f99b 	bl	80006c8 <Error_Handler>
  }
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b015      	add	sp, #84	; 0x54
 8000398:	bd90      	pop	{r4, r7, pc}
	...

0800039c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <MX_TIM16_Init+0x48>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003a8:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <MX_TIM16_Init+0x4c>)
 80003aa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <MX_TIM16_Init+0x50>)
 80003b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_TIM16_Init+0x44>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fac7 	bl	8001960 <HAL_TIM_Base_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80003d6:	f000 f977 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000008c 	.word	0x2000008c
 80003e4:	40014400 	.word	0x40014400
 80003e8:	000012bf 	.word	0x000012bf
 80003ec:	0000ffff 	.word	0x0000ffff

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	22e1      	movs	r2, #225	; 0xe1
 80003fe:	0252      	lsls	r2, r2, #9
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fb9d 	bl	8001b74 <HAL_UART_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f943 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200000d4 	.word	0x200000d4
 800044c:	40013800 	.word	0x40013800

08000450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART2_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800045c:	22e1      	movs	r2, #225	; 0xe1
 800045e:	0252      	lsls	r2, r2, #9
 8000460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fb6d 	bl	8001b74 <HAL_UART_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f913 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000158 	.word	0x20000158
 80004ac:	40004400 	.word	0x40004400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b08b      	sub	sp, #44	; 0x2c
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	2414      	movs	r4, #20
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f001 fed5 	bl	8002270 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b4c      	ldr	r3, [pc, #304]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0309      	lsls	r1, r1, #12
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b48      	ldr	r3, [pc, #288]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	031b      	lsls	r3, r3, #12
 80004dc:	4013      	ands	r3, r2
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b45      	ldr	r3, [pc, #276]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b44      	ldr	r3, [pc, #272]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	03c9      	lsls	r1, r1, #15
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b41      	ldr	r3, [pc, #260]	; (80005f8 <MX_GPIO_Init+0x148>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	03db      	lsls	r3, r3, #15
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <MX_GPIO_Init+0x148>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <MX_GPIO_Init+0x148>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0289      	lsls	r1, r1, #10
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <MX_GPIO_Init+0x148>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	029b      	lsls	r3, r3, #10
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <MX_GPIO_Init+0x148>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <MX_GPIO_Init+0x148>)
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	02c9      	lsls	r1, r1, #11
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	4b33      	ldr	r3, [pc, #204]	; (80005f8 <MX_GPIO_Init+0x148>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	02db      	lsls	r3, r3, #11
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fcb7 	bl	8000eb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0192      	lsls	r2, r2, #6
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2284      	movs	r2, #132	; 0x84
 8000550:	0392      	lsls	r2, r2, #14
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055a:	193b      	adds	r3, r7, r4
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <MX_GPIO_Init+0x14c>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f000 fb19 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2220      	movs	r2, #32
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2201      	movs	r2, #1
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800057e:	193a      	adds	r2, r7, r4
 8000580:	2390      	movs	r3, #144	; 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fb06 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Player2_Select_Pin Player2_SelectA7_Pin */
  GPIO_InitStruct.Pin = Player2_Select_Pin|Player2_SelectA7_Pin;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	22c0      	movs	r2, #192	; 0xc0
 8000590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2202      	movs	r2, #2
 800059c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	193a      	adds	r2, r7, r4
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 faf6 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Player1_Select_Pin Player1_Left_Pin Player1_Shoot_Pin Player1_Right_Pin
                           Player2_Shoot_Pin */
  GPIO_InitStruct.Pin = Player1_Select_Pin|Player1_Left_Pin|Player1_Shoot_Pin|Player1_Right_Pin
 80005ac:	0021      	movs	r1, r4
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	228f      	movs	r2, #143	; 0x8f
 80005b2:	00d2      	lsls	r2, r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
                          |Player2_Shoot_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	000c      	movs	r4, r1
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2202      	movs	r2, #2
 80005c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <MX_GPIO_Init+0x150>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f000 fae4 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Player2_Right_Pin */
  GPIO_InitStruct.Pin = Player2_Right_Pin;
 80005d0:	0021      	movs	r1, r4
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Player2_Right_GPIO_Port, &GPIO_InitStruct);
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <MX_GPIO_Init+0x14c>)
 80005e8:	0019      	movs	r1, r3
 80005ea:	0010      	movs	r0, r2
 80005ec:	f000 fad4 	bl	8000b98 <HAL_GPIO_Init>

}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b00b      	add	sp, #44	; 0x2c
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000800 	.word	0x48000800
 8000600:	48000400 	.word	0x48000400

08000604 <Player1_position>:

/* USER CODE BEGIN 4 */

//player1 position changes position of sprite READY
void Player1_position(int movement)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	int next_position = player1_x_position + movement;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <Player1_position+0x2c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	18d3      	adds	r3, r2, r3
 8000614:	60fb      	str	r3, [r7, #12]
	if(PLAYER_X_MIN_BOUND <= next_position && next_position <= PLAYER_X_MAX_BOUND)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db05      	blt.n	8000628 <Player1_position+0x24>
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b20      	cmp	r3, #32
 8000620:	dc02      	bgt.n	8000628 <Player1_position+0x24>
	{
		player1_x_position = next_position;
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <Player1_position+0x2c>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	601a      	str	r2, [r3, #0]
	}
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001dc 	.word	0x200001dc

08000634 <Player1_move>:
//Player 1 move returns either 0 for no movement, -1 for left and 1 for right; READY
int Player1_move(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	player1_left_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <Player1_move+0x80>)
 800063a:	2108      	movs	r1, #8
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fc1b 	bl	8000e78 <HAL_GPIO_ReadPin>
 8000642:	0003      	movs	r3, r0
 8000644:	001a      	movs	r2, r3
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <Player1_move+0x84>)
 8000648:	601a      	str	r2, [r3, #0]
	if(player1_left_state != player1_left_state_prev && player1_left_state)
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <Player1_move+0x84>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <Player1_move+0x88>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d00a      	beq.n	800066c <Player1_move+0x38>
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <Player1_move+0x84>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <Player1_move+0x38>
	{
		player1_left_state_prev = player1_left_state;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <Player1_move+0x84>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <Player1_move+0x88>)
 8000664:	601a      	str	r2, [r3, #0]
		return -1;
 8000666:	2301      	movs	r3, #1
 8000668:	425b      	negs	r3, r3
 800066a:	e01f      	b.n	80006ac <Player1_move+0x78>
	}
	player1_left_state_prev = 0;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <Player1_move+0x88>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	player1_right_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <Player1_move+0x80>)
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fbfe 	bl	8000e78 <HAL_GPIO_ReadPin>
 800067c:	0003      	movs	r3, r0
 800067e:	001a      	movs	r2, r3
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <Player1_move+0x8c>)
 8000682:	601a      	str	r2, [r3, #0]
	if(player1_right_state != player1_right_state_prev && player1_right_state)
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <Player1_move+0x8c>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <Player1_move+0x90>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d009      	beq.n	80006a4 <Player1_move+0x70>
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <Player1_move+0x8c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d005      	beq.n	80006a4 <Player1_move+0x70>
	{
		player1_right_state_prev = player1_right_state;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <Player1_move+0x8c>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <Player1_move+0x90>)
 800069e:	601a      	str	r2, [r3, #0]
		return 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e003      	b.n	80006ac <Player1_move+0x78>
	}
	player1_right_state_prev = 0;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <Player1_move+0x90>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
	return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	48000400 	.word	0x48000400
 80006b8:	200001e0 	.word	0x200001e0
 80006bc:	200001e4 	.word	0x200001e4
 80006c0:	200001e8 	.word	0x200001e8
 80006c4:	200001ec 	.word	0x200001ec

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0549      	lsls	r1, r1, #21
 80006fc:	430a      	orrs	r2, r1
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_MspInit+0x44>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	055b      	lsls	r3, r3, #21
 8000708:	4013      	ands	r3, r2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_TIM_Base_MspInit+0x38>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d10d      	bne.n	800074a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_TIM_Base_MspInit+0x3c>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_TIM_Base_MspInit+0x3c>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_TIM_Base_MspInit+0x3c>)
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b004      	add	sp, #16
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40014400 	.word	0x40014400
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08d      	sub	sp, #52	; 0x34
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	241c      	movs	r4, #28
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f001 fd7e 	bl	8002270 <memset>
  if(huart->Instance==USART1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a39      	ldr	r2, [pc, #228]	; (8000860 <HAL_UART_MspInit+0x104>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d134      	bne.n	80007e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_UART_MspInit+0x108>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <HAL_UART_MspInit+0x108>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	01c9      	lsls	r1, r1, #7
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <HAL_UART_MspInit+0x108>)
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4013      	ands	r3, r2
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_UART_MspInit+0x108>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <HAL_UART_MspInit+0x108>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_UART_MspInit+0x108>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	4013      	ands	r3, r2
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	22c0      	movs	r2, #192	; 0xc0
 80007ba:	00d2      	lsls	r2, r2, #3
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2202      	movs	r2, #2
 80007c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2203      	movs	r2, #3
 80007d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2201      	movs	r2, #1
 80007d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	187a      	adds	r2, r7, r1
 80007da:	2390      	movs	r3, #144	; 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 f9d9 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e6:	e037      	b.n	8000858 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_UART_MspInit+0x10c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d132      	bne.n	8000858 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_UART_MspInit+0x108>)
 80007f4:	69da      	ldr	r2, [r3, #28]
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_UART_MspInit+0x108>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0289      	lsls	r1, r1, #10
 80007fc:	430a      	orrs	r2, r1
 80007fe:	61da      	str	r2, [r3, #28]
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0x108>)
 8000802:	69da      	ldr	r2, [r3, #28]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	029b      	lsls	r3, r3, #10
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0x108>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_UART_MspInit+0x108>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0289      	lsls	r1, r1, #10
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0x108>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	4013      	ands	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082a:	211c      	movs	r1, #28
 800082c:	187b      	adds	r3, r7, r1
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2202      	movs	r2, #2
 8000836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2201      	movs	r2, #1
 8000848:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	187a      	adds	r2, r7, r1
 800084c:	2390      	movs	r3, #144	; 0x90
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f9a0 	bl	8000b98 <HAL_GPIO_Init>
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b00d      	add	sp, #52	; 0x34
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	40013800 	.word	0x40013800
 8000864:	40021000 	.word	0x40021000
 8000868:	40004400 	.word	0x40004400

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f8b2 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f001 fca6 	bl	800221c <__errno>
 80008d0:	0003      	movs	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	425b      	negs	r3, r3
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	18d2      	adds	r2, r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b006      	add	sp, #24
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20002000 	.word	0x20002000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000234 	.word	0x20000234
 8000904:	20000250 	.word	0x20000250

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000916:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0b      	ldr	r4, [pc, #44]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093e:	f7ff ffe3 	bl	8000908 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000942:	f001 fc71 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fc75 	bl	8000234 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   r0, =_estack
 800094c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000958:	08002be8 	.word	0x08002be8
  ldr r2, =_sbss
 800095c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000960:	2000024c 	.word	0x2000024c

08000964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_IRQHandler>
	...

08000968 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_Init+0x24>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_Init+0x24>)
 8000972:	2110      	movs	r1, #16
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f809 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097e:	f7ff fea9 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x5c>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_InitTick+0x60>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	0019      	movs	r1, r3
 80009a2:	23fa      	movs	r3, #250	; 0xfa
 80009a4:	0098      	lsls	r0, r3, #2
 80009a6:	f7ff fbb9 	bl	800011c <__udivsi3>
 80009aa:	0003      	movs	r3, r0
 80009ac:	0019      	movs	r1, r3
 80009ae:	0020      	movs	r0, r4
 80009b0:	f7ff fbb4 	bl	800011c <__udivsi3>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f8e1 	bl	8000b7e <HAL_SYSTICK_Config>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e00f      	b.n	80009e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d80b      	bhi.n	80009e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2301      	movs	r3, #1
 80009ce:	425b      	negs	r3, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f8be 	bl	8000b54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_InitTick+0x64>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b003      	add	sp, #12
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	001a      	movs	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	18d2      	adds	r2, r2, r3
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000238 	.word	0x20000238

08000a1c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000238 	.word	0x20000238

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	0002      	movs	r2, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b7f      	cmp	r3, #127	; 0x7f
 8000a44:	d828      	bhi.n	8000a98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	33c0      	adds	r3, #192	; 0xc0
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	589b      	ldr	r3, [r3, r2]
 8000a56:	1dfa      	adds	r2, r7, #7
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	400a      	ands	r2, r1
 8000a60:	00d2      	lsls	r2, r2, #3
 8000a62:	21ff      	movs	r1, #255	; 0xff
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	43d2      	mvns	r2, r2
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	019b      	lsls	r3, r3, #6
 8000a72:	22ff      	movs	r2, #255	; 0xff
 8000a74:	401a      	ands	r2, r3
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	4003      	ands	r3, r0
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a84:	481f      	ldr	r0, [pc, #124]	; (8000b04 <__NVIC_SetPriority+0xd4>)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	33c0      	adds	r3, #192	; 0xc0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a96:	e031      	b.n	8000afc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	400b      	ands	r3, r1
 8000aa4:	3b08      	subs	r3, #8
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3306      	adds	r3, #6
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	18d3      	adds	r3, r2, r3
 8000aae:	3304      	adds	r3, #4
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1dfa      	adds	r2, r7, #7
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	400a      	ands	r2, r1
 8000abc:	00d2      	lsls	r2, r2, #3
 8000abe:	21ff      	movs	r1, #255	; 0xff
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	019b      	lsls	r3, r3, #6
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2303      	movs	r3, #3
 8000ada:	4003      	ands	r3, r0
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <__NVIC_SetPriority+0xd8>)
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	230f      	movs	r3, #15
 8000aea:	4023      	ands	r3, r4
 8000aec:	3b08      	subs	r3, #8
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	430a      	orrs	r2, r1
 8000af2:	3306      	adds	r3, #6
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	18c3      	adds	r3, r0, r3
 8000af8:	3304      	adds	r3, #4
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b003      	add	sp, #12
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	045b      	lsls	r3, r3, #17
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d301      	bcc.n	8000b24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b20:	2301      	movs	r3, #1
 8000b22:	e010      	b.n	8000b46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SysTick_Config+0x44>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	2103      	movs	r1, #3
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ff7c 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x44>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	210f      	movs	r1, #15
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffbf 	bl	8000b0c <SysTick_Config>
 8000b8e:	0003      	movs	r3, r0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e14f      	b.n	8000e48 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x28>
 8000bbe:	e140      	b.n	8000e42 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	2201      	movs	r2, #1
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	58d3      	ldr	r3, [r2, r3]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2207      	movs	r2, #7
 8000c94:	4013      	ands	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2107      	movs	r1, #7
 8000cae:	400b      	ands	r3, r1
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	6939      	ldr	r1, [r7, #16]
 8000cc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x174>
 8000d0a:	e09a      	b.n	8000e42 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	4b54      	ldr	r3, [pc, #336]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d0e:	699a      	ldr	r2, [r3, #24]
 8000d10:	4b53      	ldr	r3, [pc, #332]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	589b      	ldr	r3, [r3, r2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	2390      	movs	r3, #144	; 0x90
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00d      	beq.n	8000d76 <HAL_GPIO_Init+0x1de>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a43      	ldr	r2, [pc, #268]	; (8000e6c <HAL_GPIO_Init+0x2d4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x1da>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_GPIO_Init+0x1d6>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e004      	b.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	2103      	movs	r1, #3
 8000d80:	400a      	ands	r2, r1
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	4093      	lsls	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d8c:	4935      	ldr	r1, [pc, #212]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	4013      	ands	r3, r2
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	035b      	lsls	r3, r3, #13
 8000e06:	4013      	ands	r3, r2
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	039b      	lsls	r3, r3, #14
 8000e30:	4013      	ands	r3, r2
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	1e13      	subs	r3, r2, #0
 8000e52:	d000      	beq.n	8000e56 <HAL_GPIO_Init+0x2be>
 8000e54:	e6a8      	b.n	8000ba8 <HAL_GPIO_Init+0x10>
  } 
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b006      	add	sp, #24
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	000a      	movs	r2, r1
 8000e82:	1cbb      	adds	r3, r7, #2
 8000e84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	1cba      	adds	r2, r7, #2
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d004      	beq.n	8000e9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e003      	b.n	8000ea4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	781b      	ldrb	r3, [r3, #0]
  }
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	0008      	movs	r0, r1
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	1cbb      	adds	r3, r7, #2
 8000ec0:	1c02      	adds	r2, r0, #0
 8000ec2:	801a      	strh	r2, [r3, #0]
 8000ec4:	1c7b      	adds	r3, r7, #1
 8000ec6:	1c0a      	adds	r2, r1, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eca:	1c7b      	adds	r3, r7, #1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed2:	1cbb      	adds	r3, r7, #2
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eda:	e003      	b.n	8000ee4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000edc:	1cbb      	adds	r3, r7, #2
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e301      	b.n	8001502 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	d100      	bne.n	8000f0a <HAL_RCC_OscConfig+0x1e>
 8000f08:	e08d      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f0a:	4bc3      	ldr	r3, [pc, #780]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	220c      	movs	r2, #12
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d00e      	beq.n	8000f34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f16:	4bc0      	ldr	r3, [pc, #768]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d116      	bne.n	8000f50 <HAL_RCC_OscConfig+0x64>
 8000f22:	4bbd      	ldr	r3, [pc, #756]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	025b      	lsls	r3, r3, #9
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	025b      	lsls	r3, r3, #9
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d10d      	bne.n	8000f50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4bb8      	ldr	r3, [pc, #736]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_OscConfig+0x56>
 8000f40:	e070      	b.n	8001024 <HAL_RCC_OscConfig+0x138>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d000      	beq.n	8000f4c <HAL_RCC_OscConfig+0x60>
 8000f4a:	e06b      	b.n	8001024 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e2d8      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d107      	bne.n	8000f68 <HAL_RCC_OscConfig+0x7c>
 8000f58:	4baf      	ldr	r3, [pc, #700]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4bae      	ldr	r3, [pc, #696]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0249      	lsls	r1, r1, #9
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e02f      	b.n	8000fc8 <HAL_RCC_OscConfig+0xdc>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x9e>
 8000f70:	4ba9      	ldr	r3, [pc, #676]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4ba8      	ldr	r3, [pc, #672]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	49a9      	ldr	r1, [pc, #676]	; (800121c <HAL_RCC_OscConfig+0x330>)
 8000f78:	400a      	ands	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4ba5      	ldr	r3, [pc, #660]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	49a7      	ldr	r1, [pc, #668]	; (8001220 <HAL_RCC_OscConfig+0x334>)
 8000f84:	400a      	ands	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e01e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xdc>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d10e      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xc4>
 8000f92:	4ba1      	ldr	r3, [pc, #644]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4ba0      	ldr	r3, [pc, #640]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	02c9      	lsls	r1, r1, #11
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4b9d      	ldr	r3, [pc, #628]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b9c      	ldr	r3, [pc, #624]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0249      	lsls	r1, r1, #9
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xdc>
 8000fb0:	4b99      	ldr	r3, [pc, #612]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b98      	ldr	r3, [pc, #608]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	4999      	ldr	r1, [pc, #612]	; (800121c <HAL_RCC_OscConfig+0x330>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	4b96      	ldr	r3, [pc, #600]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b95      	ldr	r3, [pc, #596]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	4997      	ldr	r1, [pc, #604]	; (8001220 <HAL_RCC_OscConfig+0x334>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d014      	beq.n	8000ffa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fd24 	bl	8000a1c <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fda:	f7ff fd1f 	bl	8000a1c <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e28a      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fec:	4b8a      	ldr	r3, [pc, #552]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	029b      	lsls	r3, r3, #10
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0xee>
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fd0f 	bl	8000a1c <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fd0a 	bl	8000a1c <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e275      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	4013      	ands	r3, r2
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x118>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x146>
 8001030:	e069      	b.n	8001106 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001032:	4b79      	ldr	r3, [pc, #484]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	220c      	movs	r2, #12
 8001038:	4013      	ands	r3, r2
 800103a:	d00b      	beq.n	8001054 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800103c:	4b76      	ldr	r3, [pc, #472]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	220c      	movs	r2, #12
 8001042:	4013      	ands	r3, r2
 8001044:	2b08      	cmp	r3, #8
 8001046:	d11c      	bne.n	8001082 <HAL_RCC_OscConfig+0x196>
 8001048:	4b73      	ldr	r3, [pc, #460]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	4013      	ands	r3, r2
 8001052:	d116      	bne.n	8001082 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x17e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e24b      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	22f8      	movs	r2, #248	; 0xf8
 8001070:	4393      	bics	r3, r2
 8001072:	0019      	movs	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	00da      	lsls	r2, r3, #3
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001080:	e041      	b.n	8001106 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d024      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fcc1 	bl	8000a1c <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fcbc 	bl	8000a1c <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e227      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4b59      	ldr	r3, [pc, #356]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f1      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	22f8      	movs	r2, #248	; 0xf8
 80010c2:	4393      	bics	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	00da      	lsls	r2, r3, #3
 80010cc:	4b52      	ldr	r3, [pc, #328]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e018      	b.n	8001106 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc9c 	bl	8000a1c <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc97 	bl	8000a1c <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e202      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fc:	4b46      	ldr	r3, [pc, #280]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d1f1      	bne.n	80010ea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2208      	movs	r2, #8
 800110c:	4013      	ands	r3, r2
 800110e:	d036      	beq.n	800117e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d019      	beq.n	800114c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800111e:	2101      	movs	r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fc7a 	bl	8000a1c <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fc75 	bl	8000a1c <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1e0      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d0f1      	beq.n	800112e <HAL_RCC_OscConfig+0x242>
 800114a:	e018      	b.n	800117e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800114e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001150:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fc60 	bl	8000a1c <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fc5b 	bl	8000a1c <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1c6      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d1f1      	bne.n	8001162 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x29e>
 8001188:	e0b4      	b.n	80012f4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	201f      	movs	r0, #31
 800118c:	183b      	adds	r3, r7, r0
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001194:	69da      	ldr	r2, [r3, #28]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	055b      	lsls	r3, r3, #21
 800119a:	4013      	ands	r3, r2
 800119c:	d110      	bne.n	80011c0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0549      	lsls	r1, r1, #21
 80011a8:	430a      	orrs	r2, r1
 80011aa:	61da      	str	r2, [r3, #28]
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	055b      	lsls	r3, r3, #21
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	d11a      	bne.n	8001202 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_RCC_OscConfig+0x338>)
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	0049      	lsls	r1, r1, #1
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff fc1f 	bl	8000a1c <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e4:	f7ff fc1a 	bl	8000a1c <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e185      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_OscConfig+0x338>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d10e      	bne.n	8001228 <HAL_RCC_OscConfig+0x33c>
 800120a:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_RCC_OscConfig+0x32c>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	621a      	str	r2, [r3, #32]
 8001216:	e035      	b.n	8001284 <HAL_RCC_OscConfig+0x398>
 8001218:	40021000 	.word	0x40021000
 800121c:	fffeffff 	.word	0xfffeffff
 8001220:	fffbffff 	.word	0xfffbffff
 8001224:	40007000 	.word	0x40007000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x35e>
 8001230:	4bb6      	ldr	r3, [pc, #728]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4bb5      	ldr	r3, [pc, #724]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	4bb3      	ldr	r3, [pc, #716]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	4bb2      	ldr	r3, [pc, #712]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001242:	2104      	movs	r1, #4
 8001244:	438a      	bics	r2, r1
 8001246:	621a      	str	r2, [r3, #32]
 8001248:	e01c      	b.n	8001284 <HAL_RCC_OscConfig+0x398>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x380>
 8001252:	4bae      	ldr	r3, [pc, #696]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	4bad      	ldr	r3, [pc, #692]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001258:	2104      	movs	r1, #4
 800125a:	430a      	orrs	r2, r1
 800125c:	621a      	str	r2, [r3, #32]
 800125e:	4bab      	ldr	r3, [pc, #684]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	4baa      	ldr	r3, [pc, #680]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001264:	2101      	movs	r1, #1
 8001266:	430a      	orrs	r2, r1
 8001268:	621a      	str	r2, [r3, #32]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0x398>
 800126c:	4ba7      	ldr	r3, [pc, #668]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4ba6      	ldr	r3, [pc, #664]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001272:	2101      	movs	r1, #1
 8001274:	438a      	bics	r2, r1
 8001276:	621a      	str	r2, [r3, #32]
 8001278:	4ba4      	ldr	r3, [pc, #656]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	4ba3      	ldr	r3, [pc, #652]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800127e:	2104      	movs	r1, #4
 8001280:	438a      	bics	r2, r1
 8001282:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d014      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fbc6 	bl	8000a1c <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	e009      	b.n	80012aa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fbc1 	bl	8000a1c <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4a9b      	ldr	r2, [pc, #620]	; (8001510 <HAL_RCC_OscConfig+0x624>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e12b      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012aa:	4b98      	ldr	r3, [pc, #608]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x3aa>
 80012b4:	e013      	b.n	80012de <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbb1 	bl	8000a1c <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012be:	e009      	b.n	80012d4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fbac 	bl	8000a1c <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4a91      	ldr	r2, [pc, #580]	; (8001510 <HAL_RCC_OscConfig+0x624>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e116      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b8d      	ldr	r3, [pc, #564]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012de:	231f      	movs	r3, #31
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	4b87      	ldr	r3, [pc, #540]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80012ee:	4989      	ldr	r1, [pc, #548]	; (8001514 <HAL_RCC_OscConfig+0x628>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2210      	movs	r2, #16
 80012fa:	4013      	ands	r3, r2
 80012fc:	d063      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d12a      	bne.n	800135c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001306:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800130c:	2104      	movs	r1, #4
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001312:	4b7e      	ldr	r3, [pc, #504]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb7d 	bl	8000a1c <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001328:	f7ff fb78 	bl	8000a1c <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0e3      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d0f1      	beq.n	8001328 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001344:	4b71      	ldr	r3, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001348:	22f8      	movs	r2, #248	; 0xf8
 800134a:	4393      	bics	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	00da      	lsls	r2, r3, #3
 8001354:	4b6d      	ldr	r3, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001356:	430a      	orrs	r2, r1
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
 800135a:	e034      	b.n	80013c6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	3305      	adds	r3, #5
 8001362:	d111      	bne.n	8001388 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001364:	4b69      	ldr	r3, [pc, #420]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	22f8      	movs	r2, #248	; 0xf8
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	00da      	lsls	r2, r3, #3
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
 8001386:	e01e      	b.n	80013c6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001388:	4b60      	ldr	r3, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138c:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800138e:	2104      	movs	r1, #4
 8001390:	430a      	orrs	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001394:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001398:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fb3c 	bl	8000a1c <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013aa:	f7ff fb37 	bl	8000a1c <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0a2      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013bc:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80013be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f1      	bne.n	80013aa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4e4>
 80013ce:	e097      	b.n	8001500 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d0:	4b4e      	ldr	r3, [pc, #312]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	220c      	movs	r2, #12
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d100      	bne.n	80013de <HAL_RCC_OscConfig+0x4f2>
 80013dc:	e06b      	b.n	80014b6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d14c      	bne.n	8001480 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b48      	ldr	r3, [pc, #288]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80013ec:	494a      	ldr	r1, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x62c>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb13 	bl	8000a1c <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff fb0e 	bl	8000a1c <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e079      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	049b      	lsls	r3, r3, #18
 8001416:	4013      	ands	r3, r2
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	220f      	movs	r2, #15
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001428:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a3a      	ldr	r2, [pc, #232]	; (800151c <HAL_RCC_OscConfig+0x630>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	431a      	orrs	r2, r3
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001448:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_RCC_OscConfig+0x620>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0449      	lsls	r1, r1, #17
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fae1 	bl	8000a1c <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fadc 	bl	8000a1c <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e047      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	049b      	lsls	r3, r3, #18
 800147a:	4013      	ands	r3, r2
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x574>
 800147e:	e03f      	b.n	8001500 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x620>)
 8001486:	4924      	ldr	r1, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x62c>)
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fac6 	bl	8000a1c <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fac1 	bl	8000a1c <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e02c      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	049b      	lsls	r3, r3, #18
 80014b0:	4013      	ands	r3, r2
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x5aa>
 80014b4:	e024      	b.n	8001500 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e01f      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RCC_OscConfig+0x620>)
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10e      	bne.n	80014fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	220f      	movs	r2, #15
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	23f0      	movs	r3, #240	; 0xf0
 80014f0:	039b      	lsls	r3, r3, #14
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b008      	add	sp, #32
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	00001388 	.word	0x00001388
 8001514:	efffffff 	.word	0xefffffff
 8001518:	feffffff 	.word	0xfeffffff
 800151c:	ffc2ffff 	.word	0xffc2ffff

08001520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b3      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d911      	bls.n	8001566 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e09a      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d015      	beq.n	800159c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d006      	beq.n	8001588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001580:	21e0      	movs	r1, #224	; 0xe0
 8001582:	00c9      	lsls	r1, r1, #3
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	22f0      	movs	r2, #240	; 0xf0
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	d040      	beq.n	8001628 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d114      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06e      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	049b      	lsls	r3, r3, #18
 80015ce:	4013      	ands	r3, r2
 80015d0:	d108      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e062      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e05b      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa10 	bl	8000a1c <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001600:	e009      	b.n	8001616 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f7ff fa0b 	bl	8000a1c <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_RCC_ClockConfig+0x18c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e042      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	220c      	movs	r2, #12
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1ec      	bne.n	8001602 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4013      	ands	r3, r2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d211      	bcs.n	800165a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x184>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e020      	b.n	800169c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_RCC_ClockConfig+0x190>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001678:	f000 f820 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167c:	0001      	movs	r1, r0
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x188>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	220f      	movs	r2, #15
 8001686:	4013      	ands	r3, r2
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x194>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	000a      	movs	r2, r1
 800168e:	40da      	lsrs	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x198>)
 8001692:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff f97b 	bl	8000990 <HAL_InitTick>
  
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	fffff8ff 	.word	0xfffff8ff
 80016b4:	08002b94 	.word	0x08002b94
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08f      	sub	sp, #60	; 0x3c
 80016c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016c2:	2314      	movs	r3, #20
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ca:	c313      	stmia	r3!, {r0, r1, r4}
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016d6:	c313      	stmia	r3!, {r0, r1, r4}
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	220c      	movs	r2, #12
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d002      	beq.n	8001706 <HAL_RCC_GetSysClockFreq+0x4a>
 8001700:	2b08      	cmp	r3, #8
 8001702:	d003      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x50>
 8001704:	e02d      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800170a:	e02d      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	220f      	movs	r2, #15
 8001712:	4013      	ands	r3, r2
 8001714:	2214      	movs	r2, #20
 8001716:	18ba      	adds	r2, r7, r2
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_RCC_GetSysClockFreq+0xc0>)
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	220f      	movs	r2, #15
 8001722:	4013      	ands	r3, r2
 8001724:	1d3a      	adds	r2, r7, #4
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800172a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	025b      	lsls	r3, r3, #9
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001738:	f7fe fcf0 	bl	800011c <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	001a      	movs	r2, r3
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	4353      	muls	r3, r2
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
 8001746:	e009      	b.n	800175c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174a:	000a      	movs	r2, r1
 800174c:	0152      	lsls	r2, r2, #5
 800174e:	1a52      	subs	r2, r2, r1
 8001750:	0193      	lsls	r3, r2, #6
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	185b      	adds	r3, r3, r1
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001760:	e002      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001766:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b00f      	add	sp, #60	; 0x3c
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	08002b74 	.word	0x08002b74
 8001778:	08002b84 	.word	0x08002b84
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_RCC_GetHCLKFreq+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	20000000 	.word	0x20000000

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800179c:	f7ff fff2 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a0:	0001      	movs	r1, r0
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	2207      	movs	r2, #7
 80017aa:	4013      	ands	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	40d9      	lsrs	r1, r3
 80017b2:	000b      	movs	r3, r1
}    
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08002ba4 	.word	0x08002ba4

080017c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	4013      	ands	r3, r2
 80017de:	d100      	bne.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80017e0:	e08e      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2017      	movs	r0, #23
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	055b      	lsls	r3, r3, #21
 80017f2:	4013      	ands	r3, r2
 80017f4:	d110      	bne.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	183b      	adds	r3, r7, r0
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4013      	ands	r3, r2
 8001822:	d11a      	bne.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0049      	lsls	r1, r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f8f3 	bl	8000a1c <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	e008      	b.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7ff f8ee 	bl	8000a1c <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e077      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d0f0      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	23c0      	movs	r3, #192	; 0xc0
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d034      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d02c      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	430a      	orrs	r2, r1
 8001892:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800189a:	492e      	ldr	r1, [pc, #184]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800189c:	400a      	ands	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f8b5 	bl	8000a1c <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	e009      	b.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff f8b0 	bl	8000a1c <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a25      	ldr	r2, [pc, #148]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e038      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ea:	2317      	movs	r3, #23
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018fa:	4918      	ldr	r1, [pc, #96]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d009      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	2203      	movs	r2, #3
 8001910:	4393      	bics	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191a:	430a      	orrs	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2220      	movs	r2, #32
 8001924:	4013      	ands	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	2210      	movs	r2, #16
 800192e:	4393      	bics	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001938:	430a      	orrs	r2, r1
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
 8001950:	fffffcff 	.word	0xfffffcff
 8001954:	fffeffff 	.word	0xfffeffff
 8001958:	00001388 	.word	0x00001388
 800195c:	efffffff 	.word	0xefffffff

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e042      	b.n	80019f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	223d      	movs	r2, #61	; 0x3d
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	223c      	movs	r2, #60	; 0x3c
 8001982:	2100      	movs	r1, #0
 8001984:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe fec7 	bl	800071c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	223d      	movs	r2, #61	; 0x3d
 8001992:	2102      	movs	r1, #2
 8001994:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f000 f871 	bl	8001a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2246      	movs	r2, #70	; 0x46
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	223e      	movs	r2, #62	; 0x3e
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	223f      	movs	r2, #63	; 0x3f
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2242      	movs	r2, #66	; 0x42
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2243      	movs	r2, #67	; 0x43
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2244      	movs	r2, #68	; 0x44
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2245      	movs	r2, #69	; 0x45
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	223d      	movs	r2, #61	; 0x3d
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	223d      	movs	r2, #61	; 0x3d
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d001      	beq.n	8001a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e02d      	b.n	8001a74 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	223d      	movs	r2, #61	; 0x3d
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_TIM_Base_Start+0x7c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <HAL_TIM_Base_Start+0x3e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_Base_Start+0x80>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_TIM_Base_Start+0x3e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_TIM_Base_Start+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d111      	bne.n	8001a62 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2207      	movs	r2, #7
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d010      	beq.n	8001a72 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a60:	e007      	b.n	8001a72 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40014000 	.word	0x40014000

08001a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <TIM_Base_SetConfig+0xd0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <TIM_Base_SetConfig+0x20>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <TIM_Base_SetConfig+0xd4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d108      	bne.n	8001aba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2270      	movs	r2, #112	; 0x70
 8001aac:	4393      	bics	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <TIM_Base_SetConfig+0xd0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <TIM_Base_SetConfig+0x62>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <TIM_Base_SetConfig+0xd4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00f      	beq.n	8001aea <TIM_Base_SetConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <TIM_Base_SetConfig+0xd8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00b      	beq.n	8001aea <TIM_Base_SetConfig+0x62>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <TIM_Base_SetConfig+0xdc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <TIM_Base_SetConfig+0x62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <TIM_Base_SetConfig+0xe0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d003      	beq.n	8001aea <TIM_Base_SetConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <TIM_Base_SetConfig+0xe4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d108      	bne.n	8001afc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <TIM_Base_SetConfig+0xe8>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	4393      	bics	r3, r2
 8001b02:	001a      	movs	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <TIM_Base_SetConfig+0xd0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00b      	beq.n	8001b42 <TIM_Base_SetConfig+0xba>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <TIM_Base_SetConfig+0xdc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <TIM_Base_SetConfig+0xba>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <TIM_Base_SetConfig+0xe0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <TIM_Base_SetConfig+0xba>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <TIM_Base_SetConfig+0xe4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d103      	bne.n	8001b4a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	615a      	str	r2, [r3, #20]
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40002000 	.word	0x40002000
 8001b64:	40014000 	.word	0x40014000
 8001b68:	40014400 	.word	0x40014400
 8001b6c:	40014800 	.word	0x40014800
 8001b70:	fffffcff 	.word	0xfffffcff

08001b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e044      	b.n	8001c10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2274      	movs	r2, #116	; 0x74
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe fddf 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2224      	movs	r2, #36	; 0x24
 8001ba2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f830 	bl	8001c1c <UART_SetConfig>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e024      	b.n	8001c10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 f963 	bl	8001e9c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	490d      	ldr	r1, [pc, #52]	; (8001c18 <HAL_UART_Init+0xa4>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 f9fb 	bl	8002004 <UART_CheckIdleState>
 8001c0e:	0003      	movs	r3, r0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	fffff7ff 	.word	0xfffff7ff

08001c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c24:	231e      	movs	r3, #30
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8d      	ldr	r2, [pc, #564]	; (8001e80 <UART_SetConfig+0x264>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a88      	ldr	r2, [pc, #544]	; (8001e84 <UART_SetConfig+0x268>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <UART_SetConfig+0x26c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a7b      	ldr	r2, [pc, #492]	; (8001e8c <UART_SetConfig+0x270>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d127      	bne.n	8001cf2 <UART_SetConfig+0xd6>
 8001ca2:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <UART_SetConfig+0x274>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d00d      	beq.n	8001cca <UART_SetConfig+0xae>
 8001cae:	d81b      	bhi.n	8001ce8 <UART_SetConfig+0xcc>
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d014      	beq.n	8001cde <UART_SetConfig+0xc2>
 8001cb4:	d818      	bhi.n	8001ce8 <UART_SetConfig+0xcc>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <UART_SetConfig+0xa4>
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d00a      	beq.n	8001cd4 <UART_SetConfig+0xb8>
 8001cbe:	e013      	b.n	8001ce8 <UART_SetConfig+0xcc>
 8001cc0:	231f      	movs	r3, #31
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e021      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001cca:	231f      	movs	r3, #31
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2202      	movs	r2, #2
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e01c      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001cd4:	231f      	movs	r3, #31
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2204      	movs	r2, #4
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e017      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001cde:	231f      	movs	r3, #31
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e012      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001ce8:	231f      	movs	r3, #31
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2210      	movs	r2, #16
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e00d      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a67      	ldr	r2, [pc, #412]	; (8001e94 <UART_SetConfig+0x278>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d104      	bne.n	8001d06 <UART_SetConfig+0xea>
 8001cfc:	231f      	movs	r3, #31
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e003      	b.n	8001d0e <UART_SetConfig+0xf2>
 8001d06:	231f      	movs	r3, #31
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d15d      	bne.n	8001dd6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001d1a:	231f      	movs	r3, #31
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d015      	beq.n	8001d50 <UART_SetConfig+0x134>
 8001d24:	dc18      	bgt.n	8001d58 <UART_SetConfig+0x13c>
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00d      	beq.n	8001d46 <UART_SetConfig+0x12a>
 8001d2a:	dc15      	bgt.n	8001d58 <UART_SetConfig+0x13c>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <UART_SetConfig+0x11a>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d005      	beq.n	8001d40 <UART_SetConfig+0x124>
 8001d34:	e010      	b.n	8001d58 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d36:	f7ff fd2f 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	61bb      	str	r3, [r7, #24]
        break;
 8001d3e:	e012      	b.n	8001d66 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d40:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <UART_SetConfig+0x27c>)
 8001d42:	61bb      	str	r3, [r7, #24]
        break;
 8001d44:	e00f      	b.n	8001d66 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d46:	f7ff fcb9 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]
        break;
 8001d4e:	e00a      	b.n	8001d66 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	61bb      	str	r3, [r7, #24]
        break;
 8001d56:	e006      	b.n	8001d66 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d5c:	231e      	movs	r3, #30
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
        break;
 8001d64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d100      	bne.n	8001d6e <UART_SetConfig+0x152>
 8001d6c:	e07b      	b.n	8001e66 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	005a      	lsls	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	18d2      	adds	r2, r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f7fe f9cb 	bl	800011c <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d91c      	bls.n	8001dcc <UART_SetConfig+0x1b0>
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d217      	bcs.n	8001dcc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	200e      	movs	r0, #14
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	210f      	movs	r1, #15
 8001da6:	438a      	bics	r2, r1
 8001da8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	b299      	uxth	r1, r3
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	183a      	adds	r2, r7, r0
 8001dba:	8812      	ldrh	r2, [r2, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	183a      	adds	r2, r7, r0
 8001dc6:	8812      	ldrh	r2, [r2, #0]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	e04c      	b.n	8001e66 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001dcc:	231e      	movs	r3, #30
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e047      	b.n	8001e66 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d015      	beq.n	8001e0c <UART_SetConfig+0x1f0>
 8001de0:	dc18      	bgt.n	8001e14 <UART_SetConfig+0x1f8>
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d00d      	beq.n	8001e02 <UART_SetConfig+0x1e6>
 8001de6:	dc15      	bgt.n	8001e14 <UART_SetConfig+0x1f8>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <UART_SetConfig+0x1d6>
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d005      	beq.n	8001dfc <UART_SetConfig+0x1e0>
 8001df0:	e010      	b.n	8001e14 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff fcd1 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
        break;
 8001dfa:	e012      	b.n	8001e22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <UART_SetConfig+0x27c>)
 8001dfe:	61bb      	str	r3, [r7, #24]
        break;
 8001e00:	e00f      	b.n	8001e22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e02:	f7ff fc5b 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]
        break;
 8001e0a:	e00a      	b.n	8001e22 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	61bb      	str	r3, [r7, #24]
        break;
 8001e12:	e006      	b.n	8001e22 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e18:	231e      	movs	r3, #30
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
        break;
 8001e20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01e      	beq.n	8001e66 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	085a      	lsrs	r2, r3, #1
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	18d2      	adds	r2, r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0019      	movs	r1, r3
 8001e38:	0010      	movs	r0, r2
 8001e3a:	f7fe f96f 	bl	800011c <__udivsi3>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	d909      	bls.n	8001e5e <UART_SetConfig+0x242>
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d204      	bcs.n	8001e5e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	e003      	b.n	8001e66 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e5e:	231e      	movs	r3, #30
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001e72:	231e      	movs	r3, #30
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
}
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b008      	add	sp, #32
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	ffff69f3 	.word	0xffff69f3
 8001e84:	ffffcfff 	.word	0xffffcfff
 8001e88:	fffff4ff 	.word	0xfffff4ff
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40004400 	.word	0x40004400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <UART_AdvFeatureConfig+0x144>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d00b      	beq.n	8001ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <UART_AdvFeatureConfig+0x148>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2204      	movs	r2, #4
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00b      	beq.n	8001f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <UART_AdvFeatureConfig+0x14c>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00b      	beq.n	8001f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <UART_AdvFeatureConfig+0x150>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2210      	movs	r2, #16
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <UART_AdvFeatureConfig+0x154>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <UART_AdvFeatureConfig+0x158>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	4013      	ands	r3, r2
 8001f78:	d01d      	beq.n	8001fb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <UART_AdvFeatureConfig+0x15c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	035b      	lsls	r3, r3, #13
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d10b      	bne.n	8001fb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <UART_AdvFeatureConfig+0x160>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <UART_AdvFeatureConfig+0x164>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
  }
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	fffdffff 	.word	0xfffdffff
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	fffbffff 	.word	0xfffbffff
 8001fec:	ffff7fff 	.word	0xffff7fff
 8001ff0:	ffffefff 	.word	0xffffefff
 8001ff4:	ffffdfff 	.word	0xffffdfff
 8001ff8:	ffefffff 	.word	0xffefffff
 8001ffc:	ff9fffff 	.word	0xff9fffff
 8002000:	fff7ffff 	.word	0xfff7ffff

08002004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	2100      	movs	r1, #0
 8002012:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002014:	f7fe fd02 	bl	8000a1c <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2208      	movs	r2, #8
 8002024:	4013      	ands	r3, r2
 8002026:	2b08      	cmp	r3, #8
 8002028:	d10c      	bne.n	8002044 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	0391      	lsls	r1, r2, #14
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <UART_CheckIdleState+0x8c>)
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	f000 f82c 	bl	8002094 <UART_WaitOnFlagUntilTimeout>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d001      	beq.n	8002044 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e021      	b.n	8002088 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2204      	movs	r2, #4
 800204c:	4013      	ands	r3, r2
 800204e:	2b04      	cmp	r3, #4
 8002050:	d10c      	bne.n	800206c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	03d1      	lsls	r1, r2, #15
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <UART_CheckIdleState+0x8c>)
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	f000 f818 	bl	8002094 <UART_WaitOnFlagUntilTimeout>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e00d      	b.n	8002088 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2274      	movs	r2, #116	; 0x74
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}
 8002090:	01ffffff 	.word	0x01ffffff

08002094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	; 0x50
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a4:	e0a3      	b.n	80021ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a8:	3301      	adds	r3, #1
 80020aa:	d100      	bne.n	80020ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80020ac:	e09f      	b.n	80021ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7fe fcb5 	bl	8000a1c <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d302      	bcc.n	80020c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d13d      	bne.n	8002140 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c4:	f3ef 8310 	mrs	r3, PRIMASK
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	2301      	movs	r3, #1
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	f383 8810 	msr	PRIMASK, r3
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	494c      	ldr	r1, [pc, #304]	; (8002218 <UART_WaitOnFlagUntilTimeout+0x184>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	f383 8810 	msr	PRIMASK, r3
}
 80020f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f6:	f3ef 8310 	mrs	r3, PRIMASK
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002100:	2301      	movs	r3, #1
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	f383 8810 	msr	PRIMASK, r3
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002122:	f383 8810 	msr	PRIMASK, r3
}
 8002126:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2274      	movs	r2, #116	; 0x74
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e067      	b.n	8002210 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d050      	beq.n	80021ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	401a      	ands	r2, r3
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	429a      	cmp	r2, r3
 800215e:	d146      	bne.n	80021ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216a:	f3ef 8310 	mrs	r3, PRIMASK
 800216e:	613b      	str	r3, [r7, #16]
  return(result);
 8002170:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002174:	2301      	movs	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f383 8810 	msr	PRIMASK, r3
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4923      	ldr	r1, [pc, #140]	; (8002218 <UART_WaitOnFlagUntilTimeout+0x184>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f383 8810 	msr	PRIMASK, r3
}
 800219a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219c:	f3ef 8310 	mrs	r3, PRIMASK
 80021a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80021a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f383 8810 	msr	PRIMASK, r3
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	438a      	bics	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f383 8810 	msr	PRIMASK, r3
}
 80021cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	2120      	movs	r1, #32
 80021e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2274      	movs	r2, #116	; 0x74
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e010      	b.n	8002210 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	4013      	ands	r3, r2
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	425a      	negs	r2, r3
 80021fe:	4153      	adcs	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	001a      	movs	r2, r3
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d100      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x17a>
 800220c:	e74b      	b.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b014      	add	sp, #80	; 0x50
 8002216:	bd80      	pop	{r7, pc}
 8002218:	fffffe5f 	.word	0xfffffe5f

0800221c <__errno>:
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <__errno+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4770      	bx	lr
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	2000000c 	.word	0x2000000c

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	2600      	movs	r6, #0
 800222c:	4d0c      	ldr	r5, [pc, #48]	; (8002260 <__libc_init_array+0x38>)
 800222e:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 8002230:	1b64      	subs	r4, r4, r5
 8002232:	10a4      	asrs	r4, r4, #2
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	2600      	movs	r6, #0
 800223a:	f000 fc8b 	bl	8002b54 <_init>
 800223e:	4d0a      	ldr	r5, [pc, #40]	; (8002268 <__libc_init_array+0x40>)
 8002240:	4c0a      	ldr	r4, [pc, #40]	; (800226c <__libc_init_array+0x44>)
 8002242:	1b64      	subs	r4, r4, r5
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	00b3      	lsls	r3, r6, #2
 800224e:	58eb      	ldr	r3, [r5, r3]
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	00b3      	lsls	r3, r6, #2
 8002258:	58eb      	ldr	r3, [r5, r3]
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08002be0 	.word	0x08002be0
 8002264:	08002be0 	.word	0x08002be0
 8002268:	08002be0 	.word	0x08002be0
 800226c:	08002be4 	.word	0x08002be4

08002270 <memset>:
 8002270:	0003      	movs	r3, r0
 8002272:	1882      	adds	r2, r0, r2
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	7019      	strb	r1, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <siprintf>:
 8002280:	b40e      	push	{r1, r2, r3}
 8002282:	b500      	push	{lr}
 8002284:	490b      	ldr	r1, [pc, #44]	; (80022b4 <siprintf+0x34>)
 8002286:	b09c      	sub	sp, #112	; 0x70
 8002288:	ab1d      	add	r3, sp, #116	; 0x74
 800228a:	9002      	str	r0, [sp, #8]
 800228c:	9006      	str	r0, [sp, #24]
 800228e:	9107      	str	r1, [sp, #28]
 8002290:	9104      	str	r1, [sp, #16]
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <siprintf+0x38>)
 8002294:	4909      	ldr	r1, [pc, #36]	; (80022bc <siprintf+0x3c>)
 8002296:	cb04      	ldmia	r3!, {r2}
 8002298:	9105      	str	r1, [sp, #20]
 800229a:	6800      	ldr	r0, [r0, #0]
 800229c:	a902      	add	r1, sp, #8
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	f000 f870 	bl	8002384 <_svfiprintf_r>
 80022a4:	2300      	movs	r3, #0
 80022a6:	9a02      	ldr	r2, [sp, #8]
 80022a8:	7013      	strb	r3, [r2, #0]
 80022aa:	b01c      	add	sp, #112	; 0x70
 80022ac:	bc08      	pop	{r3}
 80022ae:	b003      	add	sp, #12
 80022b0:	4718      	bx	r3
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	7fffffff 	.word	0x7fffffff
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	ffff0208 	.word	0xffff0208

080022c0 <__ssputs_r>:
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	688e      	ldr	r6, [r1, #8]
 80022c4:	b085      	sub	sp, #20
 80022c6:	0007      	movs	r7, r0
 80022c8:	000c      	movs	r4, r1
 80022ca:	9203      	str	r2, [sp, #12]
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	429e      	cmp	r6, r3
 80022d0:	d83c      	bhi.n	800234c <__ssputs_r+0x8c>
 80022d2:	2390      	movs	r3, #144	; 0x90
 80022d4:	898a      	ldrh	r2, [r1, #12]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	421a      	tst	r2, r3
 80022da:	d034      	beq.n	8002346 <__ssputs_r+0x86>
 80022dc:	6909      	ldr	r1, [r1, #16]
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	6960      	ldr	r0, [r4, #20]
 80022e2:	1a5b      	subs	r3, r3, r1
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2303      	movs	r3, #3
 80022e8:	4343      	muls	r3, r0
 80022ea:	0fdd      	lsrs	r5, r3, #31
 80022ec:	18ed      	adds	r5, r5, r3
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	9802      	ldr	r0, [sp, #8]
 80022f2:	3301      	adds	r3, #1
 80022f4:	181b      	adds	r3, r3, r0
 80022f6:	106d      	asrs	r5, r5, #1
 80022f8:	42ab      	cmp	r3, r5
 80022fa:	d900      	bls.n	80022fe <__ssputs_r+0x3e>
 80022fc:	001d      	movs	r5, r3
 80022fe:	0553      	lsls	r3, r2, #21
 8002300:	d532      	bpl.n	8002368 <__ssputs_r+0xa8>
 8002302:	0029      	movs	r1, r5
 8002304:	0038      	movs	r0, r7
 8002306:	f000 fb53 	bl	80029b0 <_malloc_r>
 800230a:	1e06      	subs	r6, r0, #0
 800230c:	d109      	bne.n	8002322 <__ssputs_r+0x62>
 800230e:	230c      	movs	r3, #12
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	2001      	movs	r0, #1
 8002316:	89a2      	ldrh	r2, [r4, #12]
 8002318:	4240      	negs	r0, r0
 800231a:	4313      	orrs	r3, r2
 800231c:	81a3      	strh	r3, [r4, #12]
 800231e:	b005      	add	sp, #20
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	9a02      	ldr	r2, [sp, #8]
 8002324:	6921      	ldr	r1, [r4, #16]
 8002326:	f000 faba 	bl	800289e <memcpy>
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <__ssputs_r+0xc0>)
 800232e:	401a      	ands	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	4313      	orrs	r3, r2
 8002334:	81a3      	strh	r3, [r4, #12]
 8002336:	9b02      	ldr	r3, [sp, #8]
 8002338:	6126      	str	r6, [r4, #16]
 800233a:	18f6      	adds	r6, r6, r3
 800233c:	6026      	str	r6, [r4, #0]
 800233e:	6165      	str	r5, [r4, #20]
 8002340:	9e01      	ldr	r6, [sp, #4]
 8002342:	1aed      	subs	r5, r5, r3
 8002344:	60a5      	str	r5, [r4, #8]
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	429e      	cmp	r6, r3
 800234a:	d900      	bls.n	800234e <__ssputs_r+0x8e>
 800234c:	9e01      	ldr	r6, [sp, #4]
 800234e:	0032      	movs	r2, r6
 8002350:	9903      	ldr	r1, [sp, #12]
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	f000 faac 	bl	80028b0 <memmove>
 8002358:	68a3      	ldr	r3, [r4, #8]
 800235a:	2000      	movs	r0, #0
 800235c:	1b9b      	subs	r3, r3, r6
 800235e:	60a3      	str	r3, [r4, #8]
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	199e      	adds	r6, r3, r6
 8002364:	6026      	str	r6, [r4, #0]
 8002366:	e7da      	b.n	800231e <__ssputs_r+0x5e>
 8002368:	002a      	movs	r2, r5
 800236a:	0038      	movs	r0, r7
 800236c:	f000 fb96 	bl	8002a9c <_realloc_r>
 8002370:	1e06      	subs	r6, r0, #0
 8002372:	d1e0      	bne.n	8002336 <__ssputs_r+0x76>
 8002374:	0038      	movs	r0, r7
 8002376:	6921      	ldr	r1, [r4, #16]
 8002378:	f000 faae 	bl	80028d8 <_free_r>
 800237c:	e7c7      	b.n	800230e <__ssputs_r+0x4e>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	fffffb7f 	.word	0xfffffb7f

08002384 <_svfiprintf_r>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b0a1      	sub	sp, #132	; 0x84
 8002388:	9003      	str	r0, [sp, #12]
 800238a:	001d      	movs	r5, r3
 800238c:	898b      	ldrh	r3, [r1, #12]
 800238e:	000f      	movs	r7, r1
 8002390:	0016      	movs	r6, r2
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	d511      	bpl.n	80023ba <_svfiprintf_r+0x36>
 8002396:	690b      	ldr	r3, [r1, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10e      	bne.n	80023ba <_svfiprintf_r+0x36>
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	f000 fb07 	bl	80029b0 <_malloc_r>
 80023a2:	6038      	str	r0, [r7, #0]
 80023a4:	6138      	str	r0, [r7, #16]
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d105      	bne.n	80023b6 <_svfiprintf_r+0x32>
 80023aa:	230c      	movs	r3, #12
 80023ac:	9a03      	ldr	r2, [sp, #12]
 80023ae:	3801      	subs	r0, #1
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	b021      	add	sp, #132	; 0x84
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	2300      	movs	r3, #0
 80023bc:	ac08      	add	r4, sp, #32
 80023be:	6163      	str	r3, [r4, #20]
 80023c0:	3320      	adds	r3, #32
 80023c2:	7663      	strb	r3, [r4, #25]
 80023c4:	3310      	adds	r3, #16
 80023c6:	76a3      	strb	r3, [r4, #26]
 80023c8:	9507      	str	r5, [sp, #28]
 80023ca:	0035      	movs	r5, r6
 80023cc:	782b      	ldrb	r3, [r5, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <_svfiprintf_r+0x52>
 80023d2:	2b25      	cmp	r3, #37	; 0x25
 80023d4:	d147      	bne.n	8002466 <_svfiprintf_r+0xe2>
 80023d6:	1bab      	subs	r3, r5, r6
 80023d8:	9305      	str	r3, [sp, #20]
 80023da:	42b5      	cmp	r5, r6
 80023dc:	d00c      	beq.n	80023f8 <_svfiprintf_r+0x74>
 80023de:	0032      	movs	r2, r6
 80023e0:	0039      	movs	r1, r7
 80023e2:	9803      	ldr	r0, [sp, #12]
 80023e4:	f7ff ff6c 	bl	80022c0 <__ssputs_r>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	d100      	bne.n	80023ee <_svfiprintf_r+0x6a>
 80023ec:	e0ae      	b.n	800254c <_svfiprintf_r+0x1c8>
 80023ee:	6962      	ldr	r2, [r4, #20]
 80023f0:	9b05      	ldr	r3, [sp, #20]
 80023f2:	4694      	mov	ip, r2
 80023f4:	4463      	add	r3, ip
 80023f6:	6163      	str	r3, [r4, #20]
 80023f8:	782b      	ldrb	r3, [r5, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d100      	bne.n	8002400 <_svfiprintf_r+0x7c>
 80023fe:	e0a5      	b.n	800254c <_svfiprintf_r+0x1c8>
 8002400:	2201      	movs	r2, #1
 8002402:	2300      	movs	r3, #0
 8002404:	4252      	negs	r2, r2
 8002406:	6062      	str	r2, [r4, #4]
 8002408:	a904      	add	r1, sp, #16
 800240a:	3254      	adds	r2, #84	; 0x54
 800240c:	1852      	adds	r2, r2, r1
 800240e:	1c6e      	adds	r6, r5, #1
 8002410:	6023      	str	r3, [r4, #0]
 8002412:	60e3      	str	r3, [r4, #12]
 8002414:	60a3      	str	r3, [r4, #8]
 8002416:	7013      	strb	r3, [r2, #0]
 8002418:	65a3      	str	r3, [r4, #88]	; 0x58
 800241a:	2205      	movs	r2, #5
 800241c:	7831      	ldrb	r1, [r6, #0]
 800241e:	4854      	ldr	r0, [pc, #336]	; (8002570 <_svfiprintf_r+0x1ec>)
 8002420:	f000 fa32 	bl	8002888 <memchr>
 8002424:	1c75      	adds	r5, r6, #1
 8002426:	2800      	cmp	r0, #0
 8002428:	d11f      	bne.n	800246a <_svfiprintf_r+0xe6>
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	06d3      	lsls	r3, r2, #27
 800242e:	d504      	bpl.n	800243a <_svfiprintf_r+0xb6>
 8002430:	2353      	movs	r3, #83	; 0x53
 8002432:	a904      	add	r1, sp, #16
 8002434:	185b      	adds	r3, r3, r1
 8002436:	2120      	movs	r1, #32
 8002438:	7019      	strb	r1, [r3, #0]
 800243a:	0713      	lsls	r3, r2, #28
 800243c:	d504      	bpl.n	8002448 <_svfiprintf_r+0xc4>
 800243e:	2353      	movs	r3, #83	; 0x53
 8002440:	a904      	add	r1, sp, #16
 8002442:	185b      	adds	r3, r3, r1
 8002444:	212b      	movs	r1, #43	; 0x2b
 8002446:	7019      	strb	r1, [r3, #0]
 8002448:	7833      	ldrb	r3, [r6, #0]
 800244a:	2b2a      	cmp	r3, #42	; 0x2a
 800244c:	d016      	beq.n	800247c <_svfiprintf_r+0xf8>
 800244e:	0035      	movs	r5, r6
 8002450:	2100      	movs	r1, #0
 8002452:	200a      	movs	r0, #10
 8002454:	68e3      	ldr	r3, [r4, #12]
 8002456:	782a      	ldrb	r2, [r5, #0]
 8002458:	1c6e      	adds	r6, r5, #1
 800245a:	3a30      	subs	r2, #48	; 0x30
 800245c:	2a09      	cmp	r2, #9
 800245e:	d94e      	bls.n	80024fe <_svfiprintf_r+0x17a>
 8002460:	2900      	cmp	r1, #0
 8002462:	d111      	bne.n	8002488 <_svfiprintf_r+0x104>
 8002464:	e017      	b.n	8002496 <_svfiprintf_r+0x112>
 8002466:	3501      	adds	r5, #1
 8002468:	e7b0      	b.n	80023cc <_svfiprintf_r+0x48>
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <_svfiprintf_r+0x1ec>)
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	1ac0      	subs	r0, r0, r3
 8002470:	2301      	movs	r3, #1
 8002472:	4083      	lsls	r3, r0
 8002474:	4313      	orrs	r3, r2
 8002476:	002e      	movs	r6, r5
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	e7ce      	b.n	800241a <_svfiprintf_r+0x96>
 800247c:	9b07      	ldr	r3, [sp, #28]
 800247e:	1d19      	adds	r1, r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	9107      	str	r1, [sp, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db01      	blt.n	800248c <_svfiprintf_r+0x108>
 8002488:	930b      	str	r3, [sp, #44]	; 0x2c
 800248a:	e004      	b.n	8002496 <_svfiprintf_r+0x112>
 800248c:	425b      	negs	r3, r3
 800248e:	60e3      	str	r3, [r4, #12]
 8002490:	2302      	movs	r3, #2
 8002492:	4313      	orrs	r3, r2
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	782b      	ldrb	r3, [r5, #0]
 8002498:	2b2e      	cmp	r3, #46	; 0x2e
 800249a:	d10a      	bne.n	80024b2 <_svfiprintf_r+0x12e>
 800249c:	786b      	ldrb	r3, [r5, #1]
 800249e:	2b2a      	cmp	r3, #42	; 0x2a
 80024a0:	d135      	bne.n	800250e <_svfiprintf_r+0x18a>
 80024a2:	9b07      	ldr	r3, [sp, #28]
 80024a4:	3502      	adds	r5, #2
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	9207      	str	r2, [sp, #28]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db2b      	blt.n	8002508 <_svfiprintf_r+0x184>
 80024b0:	9309      	str	r3, [sp, #36]	; 0x24
 80024b2:	4e30      	ldr	r6, [pc, #192]	; (8002574 <_svfiprintf_r+0x1f0>)
 80024b4:	2203      	movs	r2, #3
 80024b6:	0030      	movs	r0, r6
 80024b8:	7829      	ldrb	r1, [r5, #0]
 80024ba:	f000 f9e5 	bl	8002888 <memchr>
 80024be:	2800      	cmp	r0, #0
 80024c0:	d006      	beq.n	80024d0 <_svfiprintf_r+0x14c>
 80024c2:	2340      	movs	r3, #64	; 0x40
 80024c4:	1b80      	subs	r0, r0, r6
 80024c6:	4083      	lsls	r3, r0
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	3501      	adds	r5, #1
 80024cc:	4313      	orrs	r3, r2
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	7829      	ldrb	r1, [r5, #0]
 80024d2:	2206      	movs	r2, #6
 80024d4:	4828      	ldr	r0, [pc, #160]	; (8002578 <_svfiprintf_r+0x1f4>)
 80024d6:	1c6e      	adds	r6, r5, #1
 80024d8:	7621      	strb	r1, [r4, #24]
 80024da:	f000 f9d5 	bl	8002888 <memchr>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d03c      	beq.n	800255c <_svfiprintf_r+0x1d8>
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <_svfiprintf_r+0x1f8>)
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d125      	bne.n	8002534 <_svfiprintf_r+0x1b0>
 80024e8:	2207      	movs	r2, #7
 80024ea:	9b07      	ldr	r3, [sp, #28]
 80024ec:	3307      	adds	r3, #7
 80024ee:	4393      	bics	r3, r2
 80024f0:	3308      	adds	r3, #8
 80024f2:	9307      	str	r3, [sp, #28]
 80024f4:	6963      	ldr	r3, [r4, #20]
 80024f6:	9a04      	ldr	r2, [sp, #16]
 80024f8:	189b      	adds	r3, r3, r2
 80024fa:	6163      	str	r3, [r4, #20]
 80024fc:	e765      	b.n	80023ca <_svfiprintf_r+0x46>
 80024fe:	4343      	muls	r3, r0
 8002500:	0035      	movs	r5, r6
 8002502:	2101      	movs	r1, #1
 8002504:	189b      	adds	r3, r3, r2
 8002506:	e7a6      	b.n	8002456 <_svfiprintf_r+0xd2>
 8002508:	2301      	movs	r3, #1
 800250a:	425b      	negs	r3, r3
 800250c:	e7d0      	b.n	80024b0 <_svfiprintf_r+0x12c>
 800250e:	2300      	movs	r3, #0
 8002510:	200a      	movs	r0, #10
 8002512:	001a      	movs	r2, r3
 8002514:	3501      	adds	r5, #1
 8002516:	6063      	str	r3, [r4, #4]
 8002518:	7829      	ldrb	r1, [r5, #0]
 800251a:	1c6e      	adds	r6, r5, #1
 800251c:	3930      	subs	r1, #48	; 0x30
 800251e:	2909      	cmp	r1, #9
 8002520:	d903      	bls.n	800252a <_svfiprintf_r+0x1a6>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0c5      	beq.n	80024b2 <_svfiprintf_r+0x12e>
 8002526:	9209      	str	r2, [sp, #36]	; 0x24
 8002528:	e7c3      	b.n	80024b2 <_svfiprintf_r+0x12e>
 800252a:	4342      	muls	r2, r0
 800252c:	0035      	movs	r5, r6
 800252e:	2301      	movs	r3, #1
 8002530:	1852      	adds	r2, r2, r1
 8002532:	e7f1      	b.n	8002518 <_svfiprintf_r+0x194>
 8002534:	ab07      	add	r3, sp, #28
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	003a      	movs	r2, r7
 800253a:	0021      	movs	r1, r4
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_svfiprintf_r+0x1fc>)
 800253e:	9803      	ldr	r0, [sp, #12]
 8002540:	e000      	b.n	8002544 <_svfiprintf_r+0x1c0>
 8002542:	bf00      	nop
 8002544:	9004      	str	r0, [sp, #16]
 8002546:	9b04      	ldr	r3, [sp, #16]
 8002548:	3301      	adds	r3, #1
 800254a:	d1d3      	bne.n	80024f4 <_svfiprintf_r+0x170>
 800254c:	89bb      	ldrh	r3, [r7, #12]
 800254e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002550:	065b      	lsls	r3, r3, #25
 8002552:	d400      	bmi.n	8002556 <_svfiprintf_r+0x1d2>
 8002554:	e72d      	b.n	80023b2 <_svfiprintf_r+0x2e>
 8002556:	2001      	movs	r0, #1
 8002558:	4240      	negs	r0, r0
 800255a:	e72a      	b.n	80023b2 <_svfiprintf_r+0x2e>
 800255c:	ab07      	add	r3, sp, #28
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	003a      	movs	r2, r7
 8002562:	0021      	movs	r1, r4
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <_svfiprintf_r+0x1fc>)
 8002566:	9803      	ldr	r0, [sp, #12]
 8002568:	f000 f87c 	bl	8002664 <_printf_i>
 800256c:	e7ea      	b.n	8002544 <_svfiprintf_r+0x1c0>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	08002bac 	.word	0x08002bac
 8002574:	08002bb2 	.word	0x08002bb2
 8002578:	08002bb6 	.word	0x08002bb6
 800257c:	00000000 	.word	0x00000000
 8002580:	080022c1 	.word	0x080022c1

08002584 <_printf_common>:
 8002584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002586:	0015      	movs	r5, r2
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	688a      	ldr	r2, [r1, #8]
 800258c:	690b      	ldr	r3, [r1, #16]
 800258e:	000c      	movs	r4, r1
 8002590:	9000      	str	r0, [sp, #0]
 8002592:	4293      	cmp	r3, r2
 8002594:	da00      	bge.n	8002598 <_printf_common+0x14>
 8002596:	0013      	movs	r3, r2
 8002598:	0022      	movs	r2, r4
 800259a:	602b      	str	r3, [r5, #0]
 800259c:	3243      	adds	r2, #67	; 0x43
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d001      	beq.n	80025a8 <_printf_common+0x24>
 80025a4:	3301      	adds	r3, #1
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	d502      	bpl.n	80025b4 <_printf_common+0x30>
 80025ae:	682b      	ldr	r3, [r5, #0]
 80025b0:	3302      	adds	r3, #2
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	2306      	movs	r3, #6
 80025b8:	0017      	movs	r7, r2
 80025ba:	401f      	ands	r7, r3
 80025bc:	421a      	tst	r2, r3
 80025be:	d027      	beq.n	8002610 <_printf_common+0x8c>
 80025c0:	0023      	movs	r3, r4
 80025c2:	3343      	adds	r3, #67	; 0x43
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	4193      	sbcs	r3, r2
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	0692      	lsls	r2, r2, #26
 80025ce:	d430      	bmi.n	8002632 <_printf_common+0xae>
 80025d0:	0022      	movs	r2, r4
 80025d2:	9901      	ldr	r1, [sp, #4]
 80025d4:	9800      	ldr	r0, [sp, #0]
 80025d6:	9e08      	ldr	r6, [sp, #32]
 80025d8:	3243      	adds	r2, #67	; 0x43
 80025da:	47b0      	blx	r6
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d025      	beq.n	800262c <_printf_common+0xa8>
 80025e0:	2306      	movs	r3, #6
 80025e2:	6820      	ldr	r0, [r4, #0]
 80025e4:	682a      	ldr	r2, [r5, #0]
 80025e6:	68e1      	ldr	r1, [r4, #12]
 80025e8:	2500      	movs	r5, #0
 80025ea:	4003      	ands	r3, r0
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d103      	bne.n	80025f8 <_printf_common+0x74>
 80025f0:	1a8d      	subs	r5, r1, r2
 80025f2:	43eb      	mvns	r3, r5
 80025f4:	17db      	asrs	r3, r3, #31
 80025f6:	401d      	ands	r5, r3
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	6922      	ldr	r2, [r4, #16]
 80025fc:	4293      	cmp	r3, r2
 80025fe:	dd01      	ble.n	8002604 <_printf_common+0x80>
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	18ed      	adds	r5, r5, r3
 8002604:	2700      	movs	r7, #0
 8002606:	42bd      	cmp	r5, r7
 8002608:	d120      	bne.n	800264c <_printf_common+0xc8>
 800260a:	2000      	movs	r0, #0
 800260c:	e010      	b.n	8002630 <_printf_common+0xac>
 800260e:	3701      	adds	r7, #1
 8002610:	68e3      	ldr	r3, [r4, #12]
 8002612:	682a      	ldr	r2, [r5, #0]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	42bb      	cmp	r3, r7
 8002618:	ddd2      	ble.n	80025c0 <_printf_common+0x3c>
 800261a:	0022      	movs	r2, r4
 800261c:	2301      	movs	r3, #1
 800261e:	9901      	ldr	r1, [sp, #4]
 8002620:	9800      	ldr	r0, [sp, #0]
 8002622:	9e08      	ldr	r6, [sp, #32]
 8002624:	3219      	adds	r2, #25
 8002626:	47b0      	blx	r6
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d1f0      	bne.n	800260e <_printf_common+0x8a>
 800262c:	2001      	movs	r0, #1
 800262e:	4240      	negs	r0, r0
 8002630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002632:	2030      	movs	r0, #48	; 0x30
 8002634:	18e1      	adds	r1, r4, r3
 8002636:	3143      	adds	r1, #67	; 0x43
 8002638:	7008      	strb	r0, [r1, #0]
 800263a:	0021      	movs	r1, r4
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	3145      	adds	r1, #69	; 0x45
 8002640:	7809      	ldrb	r1, [r1, #0]
 8002642:	18a2      	adds	r2, r4, r2
 8002644:	3243      	adds	r2, #67	; 0x43
 8002646:	3302      	adds	r3, #2
 8002648:	7011      	strb	r1, [r2, #0]
 800264a:	e7c1      	b.n	80025d0 <_printf_common+0x4c>
 800264c:	0022      	movs	r2, r4
 800264e:	2301      	movs	r3, #1
 8002650:	9901      	ldr	r1, [sp, #4]
 8002652:	9800      	ldr	r0, [sp, #0]
 8002654:	9e08      	ldr	r6, [sp, #32]
 8002656:	321a      	adds	r2, #26
 8002658:	47b0      	blx	r6
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d0e6      	beq.n	800262c <_printf_common+0xa8>
 800265e:	3701      	adds	r7, #1
 8002660:	e7d1      	b.n	8002606 <_printf_common+0x82>
	...

08002664 <_printf_i>:
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	9206      	str	r2, [sp, #24]
 800266a:	000a      	movs	r2, r1
 800266c:	3243      	adds	r2, #67	; 0x43
 800266e:	9307      	str	r3, [sp, #28]
 8002670:	9005      	str	r0, [sp, #20]
 8002672:	9204      	str	r2, [sp, #16]
 8002674:	7e0a      	ldrb	r2, [r1, #24]
 8002676:	000c      	movs	r4, r1
 8002678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800267a:	2a78      	cmp	r2, #120	; 0x78
 800267c:	d807      	bhi.n	800268e <_printf_i+0x2a>
 800267e:	2a62      	cmp	r2, #98	; 0x62
 8002680:	d809      	bhi.n	8002696 <_printf_i+0x32>
 8002682:	2a00      	cmp	r2, #0
 8002684:	d100      	bne.n	8002688 <_printf_i+0x24>
 8002686:	e0c1      	b.n	800280c <_printf_i+0x1a8>
 8002688:	2a58      	cmp	r2, #88	; 0x58
 800268a:	d100      	bne.n	800268e <_printf_i+0x2a>
 800268c:	e08c      	b.n	80027a8 <_printf_i+0x144>
 800268e:	0026      	movs	r6, r4
 8002690:	3642      	adds	r6, #66	; 0x42
 8002692:	7032      	strb	r2, [r6, #0]
 8002694:	e022      	b.n	80026dc <_printf_i+0x78>
 8002696:	0010      	movs	r0, r2
 8002698:	3863      	subs	r0, #99	; 0x63
 800269a:	2815      	cmp	r0, #21
 800269c:	d8f7      	bhi.n	800268e <_printf_i+0x2a>
 800269e:	f7fd fd33 	bl	8000108 <__gnu_thumb1_case_shi>
 80026a2:	0016      	.short	0x0016
 80026a4:	fff6001f 	.word	0xfff6001f
 80026a8:	fff6fff6 	.word	0xfff6fff6
 80026ac:	001ffff6 	.word	0x001ffff6
 80026b0:	fff6fff6 	.word	0xfff6fff6
 80026b4:	fff6fff6 	.word	0xfff6fff6
 80026b8:	003600a8 	.word	0x003600a8
 80026bc:	fff6009a 	.word	0xfff6009a
 80026c0:	00b9fff6 	.word	0x00b9fff6
 80026c4:	0036fff6 	.word	0x0036fff6
 80026c8:	fff6fff6 	.word	0xfff6fff6
 80026cc:	009e      	.short	0x009e
 80026ce:	0026      	movs	r6, r4
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	3642      	adds	r6, #66	; 0x42
 80026d4:	1d11      	adds	r1, r2, #4
 80026d6:	6019      	str	r1, [r3, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	7033      	strb	r3, [r6, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	e0a7      	b.n	8002830 <_printf_i+0x1cc>
 80026e0:	6808      	ldr	r0, [r1, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	1d0a      	adds	r2, r1, #4
 80026e6:	0605      	lsls	r5, r0, #24
 80026e8:	d50b      	bpl.n	8002702 <_printf_i+0x9e>
 80026ea:	680d      	ldr	r5, [r1, #0]
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	da03      	bge.n	80026fa <_printf_i+0x96>
 80026f2:	232d      	movs	r3, #45	; 0x2d
 80026f4:	9a04      	ldr	r2, [sp, #16]
 80026f6:	426d      	negs	r5, r5
 80026f8:	7013      	strb	r3, [r2, #0]
 80026fa:	4b61      	ldr	r3, [pc, #388]	; (8002880 <_printf_i+0x21c>)
 80026fc:	270a      	movs	r7, #10
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	e01b      	b.n	800273a <_printf_i+0xd6>
 8002702:	680d      	ldr	r5, [r1, #0]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	0641      	lsls	r1, r0, #25
 8002708:	d5f1      	bpl.n	80026ee <_printf_i+0x8a>
 800270a:	b22d      	sxth	r5, r5
 800270c:	e7ef      	b.n	80026ee <_printf_i+0x8a>
 800270e:	680d      	ldr	r5, [r1, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	1d08      	adds	r0, r1, #4
 8002714:	6018      	str	r0, [r3, #0]
 8002716:	062e      	lsls	r6, r5, #24
 8002718:	d501      	bpl.n	800271e <_printf_i+0xba>
 800271a:	680d      	ldr	r5, [r1, #0]
 800271c:	e003      	b.n	8002726 <_printf_i+0xc2>
 800271e:	066d      	lsls	r5, r5, #25
 8002720:	d5fb      	bpl.n	800271a <_printf_i+0xb6>
 8002722:	680d      	ldr	r5, [r1, #0]
 8002724:	b2ad      	uxth	r5, r5
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <_printf_i+0x21c>)
 8002728:	2708      	movs	r7, #8
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	2a6f      	cmp	r2, #111	; 0x6f
 800272e:	d000      	beq.n	8002732 <_printf_i+0xce>
 8002730:	3702      	adds	r7, #2
 8002732:	0023      	movs	r3, r4
 8002734:	2200      	movs	r2, #0
 8002736:	3343      	adds	r3, #67	; 0x43
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	60a3      	str	r3, [r4, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db03      	blt.n	800274a <_printf_i+0xe6>
 8002742:	2204      	movs	r2, #4
 8002744:	6821      	ldr	r1, [r4, #0]
 8002746:	4391      	bics	r1, r2
 8002748:	6021      	str	r1, [r4, #0]
 800274a:	2d00      	cmp	r5, #0
 800274c:	d102      	bne.n	8002754 <_printf_i+0xf0>
 800274e:	9e04      	ldr	r6, [sp, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <_printf_i+0x10a>
 8002754:	9e04      	ldr	r6, [sp, #16]
 8002756:	0028      	movs	r0, r5
 8002758:	0039      	movs	r1, r7
 800275a:	f7fd fd65 	bl	8000228 <__aeabi_uidivmod>
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	3e01      	subs	r6, #1
 8002762:	5c5b      	ldrb	r3, [r3, r1]
 8002764:	7033      	strb	r3, [r6, #0]
 8002766:	002b      	movs	r3, r5
 8002768:	0005      	movs	r5, r0
 800276a:	429f      	cmp	r7, r3
 800276c:	d9f3      	bls.n	8002756 <_printf_i+0xf2>
 800276e:	2f08      	cmp	r7, #8
 8002770:	d109      	bne.n	8002786 <_printf_i+0x122>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	07db      	lsls	r3, r3, #31
 8002776:	d506      	bpl.n	8002786 <_printf_i+0x122>
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	4293      	cmp	r3, r2
 800277e:	dc02      	bgt.n	8002786 <_printf_i+0x122>
 8002780:	2330      	movs	r3, #48	; 0x30
 8002782:	3e01      	subs	r6, #1
 8002784:	7033      	strb	r3, [r6, #0]
 8002786:	9b04      	ldr	r3, [sp, #16]
 8002788:	1b9b      	subs	r3, r3, r6
 800278a:	6123      	str	r3, [r4, #16]
 800278c:	9b07      	ldr	r3, [sp, #28]
 800278e:	0021      	movs	r1, r4
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	9805      	ldr	r0, [sp, #20]
 8002794:	9b06      	ldr	r3, [sp, #24]
 8002796:	aa09      	add	r2, sp, #36	; 0x24
 8002798:	f7ff fef4 	bl	8002584 <_printf_common>
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d14c      	bne.n	800283a <_printf_i+0x1d6>
 80027a0:	2001      	movs	r0, #1
 80027a2:	4240      	negs	r0, r0
 80027a4:	b00b      	add	sp, #44	; 0x2c
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a8:	3145      	adds	r1, #69	; 0x45
 80027aa:	700a      	strb	r2, [r1, #0]
 80027ac:	4a34      	ldr	r2, [pc, #208]	; (8002880 <_printf_i+0x21c>)
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	6821      	ldr	r1, [r4, #0]
 80027b4:	ca20      	ldmia	r2!, {r5}
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	0608      	lsls	r0, r1, #24
 80027ba:	d516      	bpl.n	80027ea <_printf_i+0x186>
 80027bc:	07cb      	lsls	r3, r1, #31
 80027be:	d502      	bpl.n	80027c6 <_printf_i+0x162>
 80027c0:	2320      	movs	r3, #32
 80027c2:	4319      	orrs	r1, r3
 80027c4:	6021      	str	r1, [r4, #0]
 80027c6:	2710      	movs	r7, #16
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d1b2      	bne.n	8002732 <_printf_i+0xce>
 80027cc:	2320      	movs	r3, #32
 80027ce:	6822      	ldr	r2, [r4, #0]
 80027d0:	439a      	bics	r2, r3
 80027d2:	6022      	str	r2, [r4, #0]
 80027d4:	e7ad      	b.n	8002732 <_printf_i+0xce>
 80027d6:	2220      	movs	r2, #32
 80027d8:	6809      	ldr	r1, [r1, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	6022      	str	r2, [r4, #0]
 80027de:	0022      	movs	r2, r4
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	3245      	adds	r2, #69	; 0x45
 80027e4:	7011      	strb	r1, [r2, #0]
 80027e6:	4a27      	ldr	r2, [pc, #156]	; (8002884 <_printf_i+0x220>)
 80027e8:	e7e1      	b.n	80027ae <_printf_i+0x14a>
 80027ea:	0648      	lsls	r0, r1, #25
 80027ec:	d5e6      	bpl.n	80027bc <_printf_i+0x158>
 80027ee:	b2ad      	uxth	r5, r5
 80027f0:	e7e4      	b.n	80027bc <_printf_i+0x158>
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	680d      	ldr	r5, [r1, #0]
 80027f6:	1d10      	adds	r0, r2, #4
 80027f8:	6949      	ldr	r1, [r1, #20]
 80027fa:	6018      	str	r0, [r3, #0]
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	062e      	lsls	r6, r5, #24
 8002800:	d501      	bpl.n	8002806 <_printf_i+0x1a2>
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	e002      	b.n	800280c <_printf_i+0x1a8>
 8002806:	066d      	lsls	r5, r5, #25
 8002808:	d5fb      	bpl.n	8002802 <_printf_i+0x19e>
 800280a:	8019      	strh	r1, [r3, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	9e04      	ldr	r6, [sp, #16]
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	e7bb      	b.n	800278c <_printf_i+0x128>
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	1d11      	adds	r1, r2, #4
 8002818:	6019      	str	r1, [r3, #0]
 800281a:	6816      	ldr	r6, [r2, #0]
 800281c:	2100      	movs	r1, #0
 800281e:	0030      	movs	r0, r6
 8002820:	6862      	ldr	r2, [r4, #4]
 8002822:	f000 f831 	bl	8002888 <memchr>
 8002826:	2800      	cmp	r0, #0
 8002828:	d001      	beq.n	800282e <_printf_i+0x1ca>
 800282a:	1b80      	subs	r0, r0, r6
 800282c:	6060      	str	r0, [r4, #4]
 800282e:	6863      	ldr	r3, [r4, #4]
 8002830:	6123      	str	r3, [r4, #16]
 8002832:	2300      	movs	r3, #0
 8002834:	9a04      	ldr	r2, [sp, #16]
 8002836:	7013      	strb	r3, [r2, #0]
 8002838:	e7a8      	b.n	800278c <_printf_i+0x128>
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	0032      	movs	r2, r6
 800283e:	9906      	ldr	r1, [sp, #24]
 8002840:	9805      	ldr	r0, [sp, #20]
 8002842:	9d07      	ldr	r5, [sp, #28]
 8002844:	47a8      	blx	r5
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	d0aa      	beq.n	80027a0 <_printf_i+0x13c>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	079b      	lsls	r3, r3, #30
 800284e:	d415      	bmi.n	800287c <_printf_i+0x218>
 8002850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002852:	68e0      	ldr	r0, [r4, #12]
 8002854:	4298      	cmp	r0, r3
 8002856:	daa5      	bge.n	80027a4 <_printf_i+0x140>
 8002858:	0018      	movs	r0, r3
 800285a:	e7a3      	b.n	80027a4 <_printf_i+0x140>
 800285c:	0022      	movs	r2, r4
 800285e:	2301      	movs	r3, #1
 8002860:	9906      	ldr	r1, [sp, #24]
 8002862:	9805      	ldr	r0, [sp, #20]
 8002864:	9e07      	ldr	r6, [sp, #28]
 8002866:	3219      	adds	r2, #25
 8002868:	47b0      	blx	r6
 800286a:	1c43      	adds	r3, r0, #1
 800286c:	d098      	beq.n	80027a0 <_printf_i+0x13c>
 800286e:	3501      	adds	r5, #1
 8002870:	68e3      	ldr	r3, [r4, #12]
 8002872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	42ab      	cmp	r3, r5
 8002878:	dcf0      	bgt.n	800285c <_printf_i+0x1f8>
 800287a:	e7e9      	b.n	8002850 <_printf_i+0x1ec>
 800287c:	2500      	movs	r5, #0
 800287e:	e7f7      	b.n	8002870 <_printf_i+0x20c>
 8002880:	08002bbd 	.word	0x08002bbd
 8002884:	08002bce 	.word	0x08002bce

08002888 <memchr>:
 8002888:	b2c9      	uxtb	r1, r1
 800288a:	1882      	adds	r2, r0, r2
 800288c:	4290      	cmp	r0, r2
 800288e:	d101      	bne.n	8002894 <memchr+0xc>
 8002890:	2000      	movs	r0, #0
 8002892:	4770      	bx	lr
 8002894:	7803      	ldrb	r3, [r0, #0]
 8002896:	428b      	cmp	r3, r1
 8002898:	d0fb      	beq.n	8002892 <memchr+0xa>
 800289a:	3001      	adds	r0, #1
 800289c:	e7f6      	b.n	800288c <memchr+0x4>

0800289e <memcpy>:
 800289e:	2300      	movs	r3, #0
 80028a0:	b510      	push	{r4, lr}
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d100      	bne.n	80028a8 <memcpy+0xa>
 80028a6:	bd10      	pop	{r4, pc}
 80028a8:	5ccc      	ldrb	r4, [r1, r3]
 80028aa:	54c4      	strb	r4, [r0, r3]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e7f8      	b.n	80028a2 <memcpy+0x4>

080028b0 <memmove>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4288      	cmp	r0, r1
 80028b4:	d902      	bls.n	80028bc <memmove+0xc>
 80028b6:	188b      	adds	r3, r1, r2
 80028b8:	4298      	cmp	r0, r3
 80028ba:	d303      	bcc.n	80028c4 <memmove+0x14>
 80028bc:	2300      	movs	r3, #0
 80028be:	e007      	b.n	80028d0 <memmove+0x20>
 80028c0:	5c8b      	ldrb	r3, [r1, r2]
 80028c2:	5483      	strb	r3, [r0, r2]
 80028c4:	3a01      	subs	r2, #1
 80028c6:	d2fb      	bcs.n	80028c0 <memmove+0x10>
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	5ccc      	ldrb	r4, [r1, r3]
 80028cc:	54c4      	strb	r4, [r0, r3]
 80028ce:	3301      	adds	r3, #1
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1fa      	bne.n	80028ca <memmove+0x1a>
 80028d4:	e7f8      	b.n	80028c8 <memmove+0x18>
	...

080028d8 <_free_r>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	0005      	movs	r5, r0
 80028dc:	2900      	cmp	r1, #0
 80028de:	d010      	beq.n	8002902 <_free_r+0x2a>
 80028e0:	1f0c      	subs	r4, r1, #4
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da00      	bge.n	80028ea <_free_r+0x12>
 80028e8:	18e4      	adds	r4, r4, r3
 80028ea:	0028      	movs	r0, r5
 80028ec:	f000 f918 	bl	8002b20 <__malloc_lock>
 80028f0:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <_free_r+0x90>)
 80028f2:	6813      	ldr	r3, [r2, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <_free_r+0x2c>
 80028f8:	6063      	str	r3, [r4, #4]
 80028fa:	6014      	str	r4, [r2, #0]
 80028fc:	0028      	movs	r0, r5
 80028fe:	f000 f917 	bl	8002b30 <__malloc_unlock>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	42a3      	cmp	r3, r4
 8002906:	d908      	bls.n	800291a <_free_r+0x42>
 8002908:	6821      	ldr	r1, [r4, #0]
 800290a:	1860      	adds	r0, r4, r1
 800290c:	4283      	cmp	r3, r0
 800290e:	d1f3      	bne.n	80028f8 <_free_r+0x20>
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	1841      	adds	r1, r0, r1
 8002916:	6021      	str	r1, [r4, #0]
 8002918:	e7ee      	b.n	80028f8 <_free_r+0x20>
 800291a:	001a      	movs	r2, r3
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <_free_r+0x4e>
 8002922:	42a3      	cmp	r3, r4
 8002924:	d9f9      	bls.n	800291a <_free_r+0x42>
 8002926:	6811      	ldr	r1, [r2, #0]
 8002928:	1850      	adds	r0, r2, r1
 800292a:	42a0      	cmp	r0, r4
 800292c:	d10b      	bne.n	8002946 <_free_r+0x6e>
 800292e:	6820      	ldr	r0, [r4, #0]
 8002930:	1809      	adds	r1, r1, r0
 8002932:	1850      	adds	r0, r2, r1
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	4283      	cmp	r3, r0
 8002938:	d1e0      	bne.n	80028fc <_free_r+0x24>
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	1841      	adds	r1, r0, r1
 8002940:	6011      	str	r1, [r2, #0]
 8002942:	6053      	str	r3, [r2, #4]
 8002944:	e7da      	b.n	80028fc <_free_r+0x24>
 8002946:	42a0      	cmp	r0, r4
 8002948:	d902      	bls.n	8002950 <_free_r+0x78>
 800294a:	230c      	movs	r3, #12
 800294c:	602b      	str	r3, [r5, #0]
 800294e:	e7d5      	b.n	80028fc <_free_r+0x24>
 8002950:	6821      	ldr	r1, [r4, #0]
 8002952:	1860      	adds	r0, r4, r1
 8002954:	4283      	cmp	r3, r0
 8002956:	d103      	bne.n	8002960 <_free_r+0x88>
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	1841      	adds	r1, r0, r1
 800295e:	6021      	str	r1, [r4, #0]
 8002960:	6063      	str	r3, [r4, #4]
 8002962:	6054      	str	r4, [r2, #4]
 8002964:	e7ca      	b.n	80028fc <_free_r+0x24>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	2000023c 	.word	0x2000023c

0800296c <sbrk_aligned>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4e0f      	ldr	r6, [pc, #60]	; (80029ac <sbrk_aligned+0x40>)
 8002970:	000d      	movs	r5, r1
 8002972:	6831      	ldr	r1, [r6, #0]
 8002974:	0004      	movs	r4, r0
 8002976:	2900      	cmp	r1, #0
 8002978:	d102      	bne.n	8002980 <sbrk_aligned+0x14>
 800297a:	f000 f8bf 	bl	8002afc <_sbrk_r>
 800297e:	6030      	str	r0, [r6, #0]
 8002980:	0029      	movs	r1, r5
 8002982:	0020      	movs	r0, r4
 8002984:	f000 f8ba 	bl	8002afc <_sbrk_r>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d00a      	beq.n	80029a2 <sbrk_aligned+0x36>
 800298c:	2303      	movs	r3, #3
 800298e:	1cc5      	adds	r5, r0, #3
 8002990:	439d      	bics	r5, r3
 8002992:	42a8      	cmp	r0, r5
 8002994:	d007      	beq.n	80029a6 <sbrk_aligned+0x3a>
 8002996:	1a29      	subs	r1, r5, r0
 8002998:	0020      	movs	r0, r4
 800299a:	f000 f8af 	bl	8002afc <_sbrk_r>
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	d101      	bne.n	80029a6 <sbrk_aligned+0x3a>
 80029a2:	2501      	movs	r5, #1
 80029a4:	426d      	negs	r5, r5
 80029a6:	0028      	movs	r0, r5
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	20000240 	.word	0x20000240

080029b0 <_malloc_r>:
 80029b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029b2:	2203      	movs	r2, #3
 80029b4:	1ccb      	adds	r3, r1, #3
 80029b6:	4393      	bics	r3, r2
 80029b8:	3308      	adds	r3, #8
 80029ba:	0006      	movs	r6, r0
 80029bc:	001f      	movs	r7, r3
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d232      	bcs.n	8002a28 <_malloc_r+0x78>
 80029c2:	270c      	movs	r7, #12
 80029c4:	42b9      	cmp	r1, r7
 80029c6:	d831      	bhi.n	8002a2c <_malloc_r+0x7c>
 80029c8:	0030      	movs	r0, r6
 80029ca:	f000 f8a9 	bl	8002b20 <__malloc_lock>
 80029ce:	4d32      	ldr	r5, [pc, #200]	; (8002a98 <_malloc_r+0xe8>)
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	001c      	movs	r4, r3
 80029d4:	2c00      	cmp	r4, #0
 80029d6:	d12e      	bne.n	8002a36 <_malloc_r+0x86>
 80029d8:	0039      	movs	r1, r7
 80029da:	0030      	movs	r0, r6
 80029dc:	f7ff ffc6 	bl	800296c <sbrk_aligned>
 80029e0:	0004      	movs	r4, r0
 80029e2:	1c43      	adds	r3, r0, #1
 80029e4:	d11e      	bne.n	8002a24 <_malloc_r+0x74>
 80029e6:	682c      	ldr	r4, [r5, #0]
 80029e8:	0025      	movs	r5, r4
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	d14a      	bne.n	8002a84 <_malloc_r+0xd4>
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	0029      	movs	r1, r5
 80029f2:	18e3      	adds	r3, r4, r3
 80029f4:	0030      	movs	r0, r6
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	f000 f880 	bl	8002afc <_sbrk_r>
 80029fc:	9b01      	ldr	r3, [sp, #4]
 80029fe:	4283      	cmp	r3, r0
 8002a00:	d143      	bne.n	8002a8a <_malloc_r+0xda>
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	3703      	adds	r7, #3
 8002a06:	1aff      	subs	r7, r7, r3
 8002a08:	2303      	movs	r3, #3
 8002a0a:	439f      	bics	r7, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	2f0c      	cmp	r7, #12
 8002a10:	d200      	bcs.n	8002a14 <_malloc_r+0x64>
 8002a12:	270c      	movs	r7, #12
 8002a14:	0039      	movs	r1, r7
 8002a16:	0030      	movs	r0, r6
 8002a18:	f7ff ffa8 	bl	800296c <sbrk_aligned>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d034      	beq.n	8002a8a <_malloc_r+0xda>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	19df      	adds	r7, r3, r7
 8002a24:	6027      	str	r7, [r4, #0]
 8002a26:	e013      	b.n	8002a50 <_malloc_r+0xa0>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dacb      	bge.n	80029c4 <_malloc_r+0x14>
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	2500      	movs	r5, #0
 8002a30:	6033      	str	r3, [r6, #0]
 8002a32:	0028      	movs	r0, r5
 8002a34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	1bd1      	subs	r1, r2, r7
 8002a3a:	d420      	bmi.n	8002a7e <_malloc_r+0xce>
 8002a3c:	290b      	cmp	r1, #11
 8002a3e:	d917      	bls.n	8002a70 <_malloc_r+0xc0>
 8002a40:	19e2      	adds	r2, r4, r7
 8002a42:	6027      	str	r7, [r4, #0]
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	d111      	bne.n	8002a6c <_malloc_r+0xbc>
 8002a48:	602a      	str	r2, [r5, #0]
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	6011      	str	r1, [r2, #0]
 8002a4e:	6053      	str	r3, [r2, #4]
 8002a50:	0030      	movs	r0, r6
 8002a52:	0025      	movs	r5, r4
 8002a54:	f000 f86c 	bl	8002b30 <__malloc_unlock>
 8002a58:	2207      	movs	r2, #7
 8002a5a:	350b      	adds	r5, #11
 8002a5c:	1d23      	adds	r3, r4, #4
 8002a5e:	4395      	bics	r5, r2
 8002a60:	1aea      	subs	r2, r5, r3
 8002a62:	429d      	cmp	r5, r3
 8002a64:	d0e5      	beq.n	8002a32 <_malloc_r+0x82>
 8002a66:	1b5b      	subs	r3, r3, r5
 8002a68:	50a3      	str	r3, [r4, r2]
 8002a6a:	e7e2      	b.n	8002a32 <_malloc_r+0x82>
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	e7ec      	b.n	8002a4a <_malloc_r+0x9a>
 8002a70:	6862      	ldr	r2, [r4, #4]
 8002a72:	42a3      	cmp	r3, r4
 8002a74:	d101      	bne.n	8002a7a <_malloc_r+0xca>
 8002a76:	602a      	str	r2, [r5, #0]
 8002a78:	e7ea      	b.n	8002a50 <_malloc_r+0xa0>
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	e7e8      	b.n	8002a50 <_malloc_r+0xa0>
 8002a7e:	0023      	movs	r3, r4
 8002a80:	6864      	ldr	r4, [r4, #4]
 8002a82:	e7a7      	b.n	80029d4 <_malloc_r+0x24>
 8002a84:	002c      	movs	r4, r5
 8002a86:	686d      	ldr	r5, [r5, #4]
 8002a88:	e7af      	b.n	80029ea <_malloc_r+0x3a>
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	0030      	movs	r0, r6
 8002a8e:	6033      	str	r3, [r6, #0]
 8002a90:	f000 f84e 	bl	8002b30 <__malloc_unlock>
 8002a94:	e7cd      	b.n	8002a32 <_malloc_r+0x82>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	2000023c 	.word	0x2000023c

08002a9c <_realloc_r>:
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	0007      	movs	r7, r0
 8002aa0:	000e      	movs	r6, r1
 8002aa2:	0014      	movs	r4, r2
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d105      	bne.n	8002ab4 <_realloc_r+0x18>
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	f7ff ff81 	bl	80029b0 <_malloc_r>
 8002aae:	0005      	movs	r5, r0
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d103      	bne.n	8002ac0 <_realloc_r+0x24>
 8002ab8:	f7ff ff0e 	bl	80028d8 <_free_r>
 8002abc:	0025      	movs	r5, r4
 8002abe:	e7f7      	b.n	8002ab0 <_realloc_r+0x14>
 8002ac0:	f000 f83e 	bl	8002b40 <_malloc_usable_size_r>
 8002ac4:	9001      	str	r0, [sp, #4]
 8002ac6:	4284      	cmp	r4, r0
 8002ac8:	d803      	bhi.n	8002ad2 <_realloc_r+0x36>
 8002aca:	0035      	movs	r5, r6
 8002acc:	0843      	lsrs	r3, r0, #1
 8002ace:	42a3      	cmp	r3, r4
 8002ad0:	d3ee      	bcc.n	8002ab0 <_realloc_r+0x14>
 8002ad2:	0021      	movs	r1, r4
 8002ad4:	0038      	movs	r0, r7
 8002ad6:	f7ff ff6b 	bl	80029b0 <_malloc_r>
 8002ada:	1e05      	subs	r5, r0, #0
 8002adc:	d0e8      	beq.n	8002ab0 <_realloc_r+0x14>
 8002ade:	9b01      	ldr	r3, [sp, #4]
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	429c      	cmp	r4, r3
 8002ae4:	d900      	bls.n	8002ae8 <_realloc_r+0x4c>
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	0031      	movs	r1, r6
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7ff fed7 	bl	800289e <memcpy>
 8002af0:	0031      	movs	r1, r6
 8002af2:	0038      	movs	r0, r7
 8002af4:	f7ff fef0 	bl	80028d8 <_free_r>
 8002af8:	e7da      	b.n	8002ab0 <_realloc_r+0x14>
	...

08002afc <_sbrk_r>:
 8002afc:	2300      	movs	r3, #0
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	4d06      	ldr	r5, [pc, #24]	; (8002b1c <_sbrk_r+0x20>)
 8002b02:	0004      	movs	r4, r0
 8002b04:	0008      	movs	r0, r1
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	f7fd fec8 	bl	800089c <_sbrk>
 8002b0c:	1c43      	adds	r3, r0, #1
 8002b0e:	d103      	bne.n	8002b18 <_sbrk_r+0x1c>
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d000      	beq.n	8002b18 <_sbrk_r+0x1c>
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	20000244 	.word	0x20000244

08002b20 <__malloc_lock>:
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4802      	ldr	r0, [pc, #8]	; (8002b2c <__malloc_lock+0xc>)
 8002b24:	f000 f814 	bl	8002b50 <__retarget_lock_acquire_recursive>
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	20000248 	.word	0x20000248

08002b30 <__malloc_unlock>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	4802      	ldr	r0, [pc, #8]	; (8002b3c <__malloc_unlock+0xc>)
 8002b34:	f000 f80d 	bl	8002b52 <__retarget_lock_release_recursive>
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000248 	.word	0x20000248

08002b40 <_malloc_usable_size_r>:
 8002b40:	1f0b      	subs	r3, r1, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1f18      	subs	r0, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da01      	bge.n	8002b4e <_malloc_usable_size_r+0xe>
 8002b4a:	580b      	ldr	r3, [r1, r0]
 8002b4c:	18c0      	adds	r0, r0, r3
 8002b4e:	4770      	bx	lr

08002b50 <__retarget_lock_acquire_recursive>:
 8002b50:	4770      	bx	lr

08002b52 <__retarget_lock_release_recursive>:
 8002b52:	4770      	bx	lr

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
