
BESJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003134  08003134  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003134  08003134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800313c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  080031ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080031ac  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001689  00000000  00000000  0002ad7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001060c  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd65  00000000  00000000  0003dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006546a  00000000  00000000  00049ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aef4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000aef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002da4 	.word	0x08002da4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002da4 	.word	0x08002da4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	4c35      	ldr	r4, [pc, #212]	; (800030c <main+0xd8>)
 8000238:	44a5      	add	sp, r4
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 fbee 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f87c 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f966 	bl	8000514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f934 	bl	80004b4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800024c:	f000 f8d8 	bl	8000400 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000250:	f000 f900 	bl	8000454 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //INIT VARIABLES
  player1_x_position = 9;
 8000254:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <main+0xdc>)
 8000256:	2209      	movs	r2, #9
 8000258:	601a      	str	r2, [r3, #0]
  player2_x_position = 17;
 800025a:	4b2e      	ldr	r3, [pc, #184]	; (8000314 <main+0xe0>)
 800025c:	2211      	movs	r2, #17
 800025e:	601a      	str	r2, [r3, #0]
  mushroomTimer = 0;
 8000260:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <main+0xe4>)
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim16);
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <main+0xe8>)
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fc47 	bl	8001afc <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char audio[1] = {0x11};
 800026e:	24c1      	movs	r4, #193	; 0xc1
 8000270:	00a4      	lsls	r4, r4, #2
 8000272:	193b      	adds	r3, r7, r4
 8000274:	4a2a      	ldr	r2, [pc, #168]	; (8000320 <main+0xec>)
 8000276:	7812      	ldrb	r2, [r2, #0]
 8000278:	701a      	strb	r2, [r3, #0]
	  char grid[768] = {0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x08, 0x05,
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <main+0xf0>)
 800027c:	22c2      	movs	r2, #194	; 0xc2
 800027e:	0092      	lsls	r2, r2, #2
 8000280:	189b      	adds	r3, r3, r2
 8000282:	19da      	adds	r2, r3, r7
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <main+0xf4>)
 8000286:	0010      	movs	r0, r2
 8000288:	0019      	movs	r1, r3
 800028a:	23c0      	movs	r3, #192	; 0xc0
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	001a      	movs	r2, r3
 8000290:	f002 f916 	bl	80024c0 <memcpy>
			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			  0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x08, 0x05,
			  0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x08, 0x05,
			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			  0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x03, 0x05, 0x01, 0x08, 0x06, 0x0A, 0x04, 0x0B, 0x07, 0x0C, 0x09, 0x08, 0x05};
	  fpgaTransmit(grid, 768);
 8000294:	23c0      	movs	r3, #192	; 0xc0
 8000296:	009a      	lsls	r2, r3, #2
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	0011      	movs	r1, r2
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fa45 	bl	800072c <fpgaTransmit>
	  HAL_Delay(500);
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fc1c 	bl	8000ae4 <HAL_Delay>
	  fpgaTransmit(audio, 1);
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2101      	movs	r1, #1
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fa3b 	bl	800072c <fpgaTransmit>
	  HAL_Delay(500);
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fc12 	bl	8000ae4 <HAL_Delay>

	if (__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000) //runt elke 1khz
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <main+0xe8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c6:	4a19      	ldr	r2, [pc, #100]	; (800032c <main+0xf8>)
 80002c8:	8812      	ldrh	r2, [r2, #0]
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	23fa      	movs	r3, #250	; 0xfa
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d3cc      	bcc.n	800026e <main+0x3a>
	{
		Player1_position(Player1_move());
 80002d4:	f000 f9e0 	bl	8000698 <Player1_move>
 80002d8:	0003      	movs	r3, r0
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 f9c4 	bl	8000668 <Player1_position>
		uart_buf_len = sprintf(uart_buf, "%d us\r\n", player1_x_position);
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <main+0xdc>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4912      	ldr	r1, [pc, #72]	; (8000330 <main+0xfc>)
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <main+0x100>)
 80002e8:	0018      	movs	r0, r3
 80002ea:	f002 f8fb 	bl	80024e4 <siprintf>
 80002ee:	0002      	movs	r2, r0
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <main+0x104>)
 80002f2:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
		timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0xe8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <main+0xf8>)
 80002fe:	801a      	strh	r2, [r3, #0]
		mushroomTimer++;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <main+0xe4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	1c5a      	adds	r2, r3, #1
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <main+0xe4>)
 8000308:	601a      	str	r2, [r3, #0]
  {
 800030a:	e7b0      	b.n	800026e <main+0x3a>
 800030c:	fffffcf4 	.word	0xfffffcf4
 8000310:	200001dc 	.word	0x200001dc
 8000314:	200001f0 	.word	0x200001f0
 8000318:	200001f4 	.word	0x200001f4
 800031c:	2000008c 	.word	0x2000008c
 8000320:	08002dc4 	.word	0x08002dc4
 8000324:	fffffcfc 	.word	0xfffffcfc
 8000328:	08002dc8 	.word	0x08002dc8
 800032c:	20000230 	.word	0x20000230
 8000330:	08002dbc 	.word	0x08002dbc
 8000334:	200001f8 	.word	0x200001f8
 8000338:	2000022c 	.word	0x2000022c

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b095      	sub	sp, #84	; 0x54
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	2420      	movs	r4, #32
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	2330      	movs	r3, #48	; 0x30
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 f8c0 	bl	80024d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000352:	2310      	movs	r3, #16
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	2310      	movs	r3, #16
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f002 f8b8 	bl	80024d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2310      	movs	r3, #16
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f002 f8b1 	bl	80024d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000370:	0021      	movs	r1, r4
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2201      	movs	r2, #1
 800037c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2210      	movs	r2, #16
 8000382:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2202      	movs	r2, #2
 8000388:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	22a0      	movs	r2, #160	; 0xa0
 8000394:	0392      	lsls	r2, r2, #14
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fe21 	bl	8000fe8 <HAL_RCC_OscConfig>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003aa:	f000 f9e7 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	2110      	movs	r1, #16
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2207      	movs	r2, #7
 80003b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2202      	movs	r2, #2
 80003ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2101      	movs	r1, #1
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 f925 	bl	800161c <HAL_RCC_ClockConfig>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003d6:	f000 f9d1 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003da:	003b      	movs	r3, r7
 80003dc:	2201      	movs	r2, #1
 80003de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e6:	003b      	movs	r3, r7
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fa69 	bl	80018c0 <HAL_RCCEx_PeriphCLKConfig>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003f2:	f000 f9c3 	bl	800077c <Error_Handler>
  }
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b015      	add	sp, #84	; 0x54
 80003fc:	bd90      	pop	{r4, r7, pc}
	...

08000400 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_TIM16_Init+0x44>)
 8000406:	4a10      	ldr	r2, [pc, #64]	; (8000448 <MX_TIM16_Init+0x48>)
 8000408:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_TIM16_Init+0x44>)
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <MX_TIM16_Init+0x4c>)
 800040e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_TIM16_Init+0x44>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_TIM16_Init+0x44>)
 8000418:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <MX_TIM16_Init+0x50>)
 800041a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_TIM16_Init+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_TIM16_Init+0x44>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_TIM16_Init+0x44>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_TIM16_Init+0x44>)
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fb13 	bl	8001a5c <HAL_TIM_Base_Init>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800043a:	f000 f99f 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000008c 	.word	0x2000008c
 8000448:	40014400 	.word	0x40014400
 800044c:	000012bf 	.word	0x000012bf
 8000450:	0000ffff 	.word	0x0000ffff

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <MX_USART1_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000460:	22e1      	movs	r2, #225	; 0xe1
 8000462:	0252      	lsls	r2, r2, #9
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fbe9 	bl	8001c70 <HAL_UART_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 f96b 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000d4 	.word	0x200000d4
 80004b0:	40013800 	.word	0x40013800

080004b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ba:	4a15      	ldr	r2, [pc, #84]	; (8000510 <MX_USART2_UART_Init+0x5c>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c0:	22e1      	movs	r2, #225	; 0xe1
 80004c2:	0252      	lsls	r2, r2, #9
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_USART2_UART_Init+0x58>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fbb9 	bl	8001c70 <HAL_UART_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000502:	f000 f93b 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000158 	.word	0x20000158
 8000510:	40004400 	.word	0x40004400

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	; 0x2c
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	2414      	movs	r4, #20
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f001 ffd4 	bl	80024d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b4c      	ldr	r3, [pc, #304]	; (800065c <MX_GPIO_Init+0x148>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <MX_GPIO_Init+0x148>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0309      	lsls	r1, r1, #12
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b48      	ldr	r3, [pc, #288]	; (800065c <MX_GPIO_Init+0x148>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	031b      	lsls	r3, r3, #12
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b45      	ldr	r3, [pc, #276]	; (800065c <MX_GPIO_Init+0x148>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b44      	ldr	r3, [pc, #272]	; (800065c <MX_GPIO_Init+0x148>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	03c9      	lsls	r1, r1, #15
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b41      	ldr	r3, [pc, #260]	; (800065c <MX_GPIO_Init+0x148>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	03db      	lsls	r3, r3, #15
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b3e      	ldr	r3, [pc, #248]	; (800065c <MX_GPIO_Init+0x148>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b3d      	ldr	r3, [pc, #244]	; (800065c <MX_GPIO_Init+0x148>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	0289      	lsls	r1, r1, #10
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b3a      	ldr	r3, [pc, #232]	; (800065c <MX_GPIO_Init+0x148>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	029b      	lsls	r3, r3, #10
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <MX_GPIO_Init+0x148>)
 8000580:	695a      	ldr	r2, [r3, #20]
 8000582:	4b36      	ldr	r3, [pc, #216]	; (800065c <MX_GPIO_Init+0x148>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	02c9      	lsls	r1, r1, #11
 8000588:	430a      	orrs	r2, r1
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	4b33      	ldr	r3, [pc, #204]	; (800065c <MX_GPIO_Init+0x148>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	02db      	lsls	r3, r3, #11
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fd03 	bl	8000fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	0192      	lsls	r2, r2, #6
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2284      	movs	r2, #132	; 0x84
 80005b4:	0392      	lsls	r2, r2, #14
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <MX_GPIO_Init+0x14c>)
 80005c2:	0019      	movs	r1, r3
 80005c4:	0010      	movs	r0, r2
 80005c6:	f000 fb65 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2220      	movs	r2, #32
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193a      	adds	r2, r7, r4
 80005e4:	2390      	movs	r3, #144	; 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fb52 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Player2_Select_Pin Player2_SelectA7_Pin */
  GPIO_InitStruct.Pin = Player2_Select_Pin|Player2_SelectA7_Pin;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	22c0      	movs	r2, #192	; 0xc0
 80005f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2202      	movs	r2, #2
 8000600:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	193a      	adds	r2, r7, r4
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	0011      	movs	r1, r2
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fb42 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Player1_Select_Pin Player1_Left_Pin Player1_Shoot_Pin Player1_Right_Pin
                           Player2_Shoot_Pin */
  GPIO_InitStruct.Pin = Player1_Select_Pin|Player1_Left_Pin|Player1_Shoot_Pin|Player1_Right_Pin
 8000610:	0021      	movs	r1, r4
 8000612:	187b      	adds	r3, r7, r1
 8000614:	228f      	movs	r2, #143	; 0x8f
 8000616:	00d2      	lsls	r2, r2, #3
 8000618:	601a      	str	r2, [r3, #0]
                          |Player2_Shoot_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	000c      	movs	r4, r1
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2202      	movs	r2, #2
 8000626:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	193b      	adds	r3, r7, r4
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <MX_GPIO_Init+0x150>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f000 fb30 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Player2_Right_Pin */
  GPIO_InitStruct.Pin = Player2_Right_Pin;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2202      	movs	r2, #2
 8000646:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Player2_Right_GPIO_Port, &GPIO_InitStruct);
 8000648:	187b      	adds	r3, r7, r1
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <MX_GPIO_Init+0x14c>)
 800064c:	0019      	movs	r1, r3
 800064e:	0010      	movs	r0, r2
 8000650:	f000 fb20 	bl	8000c94 <HAL_GPIO_Init>

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b00b      	add	sp, #44	; 0x2c
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800
 8000664:	48000400 	.word	0x48000400

08000668 <Player1_position>:

/* USER CODE BEGIN 4 */

//player1 position changes position of sprite READY
void Player1_position(int movement)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	int next_position = player1_x_position + movement;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <Player1_position+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	60fb      	str	r3, [r7, #12]
	if(PLAYER_X_MIN_BOUND <= next_position && next_position <= PLAYER_X_MAX_BOUND)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db05      	blt.n	800068c <Player1_position+0x24>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b20      	cmp	r3, #32
 8000684:	dc02      	bgt.n	800068c <Player1_position+0x24>
	{
		player1_x_position = next_position;
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <Player1_position+0x2c>)
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	601a      	str	r2, [r3, #0]
	}
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001dc 	.word	0x200001dc

08000698 <Player1_move>:
//Player 1 move returns either 0 for no movement, -1 for left and 1 for right; READY
int Player1_move(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	player1_left_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <Player1_move+0x80>)
 800069e:	2108      	movs	r1, #8
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fc67 	bl	8000f74 <HAL_GPIO_ReadPin>
 80006a6:	0003      	movs	r3, r0
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <Player1_move+0x84>)
 80006ac:	601a      	str	r2, [r3, #0]
	if(player1_left_state != player1_left_state_prev && player1_left_state)
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <Player1_move+0x84>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <Player1_move+0x88>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d00a      	beq.n	80006d0 <Player1_move+0x38>
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <Player1_move+0x84>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <Player1_move+0x38>
	{
		player1_left_state_prev = player1_left_state;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <Player1_move+0x84>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <Player1_move+0x88>)
 80006c8:	601a      	str	r2, [r3, #0]
		return -1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	425b      	negs	r3, r3
 80006ce:	e01f      	b.n	8000710 <Player1_move+0x78>
	}
	player1_left_state_prev = 0;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <Player1_move+0x88>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
	player1_right_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <Player1_move+0x80>)
 80006d8:	2120      	movs	r1, #32
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fc4a 	bl	8000f74 <HAL_GPIO_ReadPin>
 80006e0:	0003      	movs	r3, r0
 80006e2:	001a      	movs	r2, r3
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <Player1_move+0x8c>)
 80006e6:	601a      	str	r2, [r3, #0]
	if(player1_right_state != player1_right_state_prev && player1_right_state)
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <Player1_move+0x8c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <Player1_move+0x90>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d009      	beq.n	8000708 <Player1_move+0x70>
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <Player1_move+0x8c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d005      	beq.n	8000708 <Player1_move+0x70>
	{
		player1_right_state_prev = player1_right_state;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <Player1_move+0x8c>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <Player1_move+0x90>)
 8000702:	601a      	str	r2, [r3, #0]
		return 1;
 8000704:	2301      	movs	r3, #1
 8000706:	e003      	b.n	8000710 <Player1_move+0x78>
	}
	player1_right_state_prev = 0;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <Player1_move+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
	return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	48000400 	.word	0x48000400
 800071c:	200001e0 	.word	0x200001e0
 8000720:	200001e4 	.word	0x200001e4
 8000724:	200001e8 	.word	0x200001e8
 8000728:	200001ec 	.word	0x200001ec

0800072c <fpgaTransmit>:
}



////DATA COM
int fpgaTransmit(char* data, int dataArraySize){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	for(int i = 0; i <= dataArraySize ; i++){
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e012      	b.n	8000762 <fpgaTransmit+0x36>
		HAL_UART_Transmit(&huart1, (uint8_t*)&data[i], sizeof(&data[i]), 100);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	18d1      	adds	r1, r2, r3
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <fpgaTransmit+0x48>)
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2204      	movs	r2, #4
 8000748:	f001 fae6 	bl	8001d18 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)&data[i], sizeof(&data[i]), 100);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	18d1      	adds	r1, r2, r3
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <fpgaTransmit+0x4c>)
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2204      	movs	r2, #4
 8000758:	f001 fade 	bl	8001d18 <HAL_UART_Transmit>
	for(int i = 0; i <= dataArraySize ; i++){
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	dde8      	ble.n	800073c <fpgaTransmit+0x10>
	//HAL_Delay(1000);
	}
	return 1;
 800076a:	2301      	movs	r3, #1
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000d4 	.word	0x200000d4
 8000778:	20000158 	.word	0x20000158

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	619a      	str	r2, [r3, #24]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	69da      	ldr	r2, [r3, #28]
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0549      	lsls	r1, r1, #21
 80007b0:	430a      	orrs	r2, r1
 80007b2:	61da      	str	r2, [r3, #28]
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_MspInit+0x44>)
 80007b6:	69da      	ldr	r2, [r3, #28]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	055b      	lsls	r3, r3, #21
 80007bc:	4013      	ands	r3, r2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10d      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	619a      	str	r2, [r3, #24]
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_TIM_Base_MspInit+0x3c>)
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b004      	add	sp, #16
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40014400 	.word	0x40014400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b08d      	sub	sp, #52	; 0x34
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	241c      	movs	r4, #28
 800081a:	193b      	adds	r3, r7, r4
 800081c:	0018      	movs	r0, r3
 800081e:	2314      	movs	r3, #20
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f001 fe55 	bl	80024d2 <memset>
  if(huart->Instance==USART1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a39      	ldr	r2, [pc, #228]	; (8000914 <HAL_UART_MspInit+0x104>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d134      	bne.n	800089c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <HAL_UART_MspInit+0x108>)
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <HAL_UART_MspInit+0x108>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	01c9      	lsls	r1, r1, #7
 800083c:	430a      	orrs	r2, r1
 800083e:	619a      	str	r2, [r3, #24]
 8000840:	4b35      	ldr	r3, [pc, #212]	; (8000918 <HAL_UART_MspInit+0x108>)
 8000842:	699a      	ldr	r2, [r3, #24]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <HAL_UART_MspInit+0x108>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <HAL_UART_MspInit+0x108>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0289      	lsls	r1, r1, #10
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <HAL_UART_MspInit+0x108>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	029b      	lsls	r3, r3, #10
 8000864:	4013      	ands	r3, r2
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	22c0      	movs	r2, #192	; 0xc0
 800086e:	00d2      	lsls	r2, r2, #3
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	0021      	movs	r1, r4
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2202      	movs	r2, #2
 8000878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2203      	movs	r2, #3
 8000884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2201      	movs	r2, #1
 800088a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	187a      	adds	r2, r7, r1
 800088e:	2390      	movs	r3, #144	; 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f000 f9fd 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	e037      	b.n	800090c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_UART_MspInit+0x10c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d132      	bne.n	800090c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x108>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008de:	211c      	movs	r1, #28
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f9c4 	bl	8000c94 <HAL_GPIO_Init>
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00d      	add	sp, #52	; 0x34
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000
 800091c:	40004400 	.word	0x40004400

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8b2 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f001 fd74 	bl	800246c <__errno>
 8000984:	0003      	movs	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	2301      	movs	r3, #1
 800098c:	425b      	negs	r3, r3
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	18d2      	adds	r2, r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b006      	add	sp, #24
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20002000 	.word	0x20002000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000234 	.word	0x20000234
 80009b8:	20000250 	.word	0x20000250

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009f2:	f7ff ffe3 	bl	80009bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009f6:	f001 fd3f 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fc1b 	bl	8000234 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a0c:	0800313c 	.word	0x0800313c
  ldr r2, =_sbss
 8000a10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a14:	2000024c 	.word	0x2000024c

08000a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>
	...

08000a1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <HAL_Init+0x24>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_Init+0x24>)
 8000a26:	2110      	movs	r1, #16
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f809 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a32:	f7ff fea9 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a4e:	681c      	ldr	r4, [r3, #0]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_InitTick+0x60>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	0019      	movs	r1, r3
 8000a56:	23fa      	movs	r3, #250	; 0xfa
 8000a58:	0098      	lsls	r0, r3, #2
 8000a5a:	f7ff fb5f 	bl	800011c <__udivsi3>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	0019      	movs	r1, r3
 8000a62:	0020      	movs	r0, r4
 8000a64:	f7ff fb5a 	bl	800011c <__udivsi3>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f905 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e00f      	b.n	8000a98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d80b      	bhi.n	8000a96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f8e2 	bl	8000c50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_InitTick+0x64>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b003      	add	sp, #12
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	18d2      	adds	r2, r2, r3
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000238 	.word	0x20000238

08000ad0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000238 	.word	0x20000238

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	0003      	movs	r3, r0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	001a      	movs	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	0002      	movs	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b004      	add	sp, #16
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b40:	d828      	bhi.n	8000b94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	33c0      	adds	r3, #192	; 0xc0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	589b      	ldr	r3, [r3, r2]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b92:	e031      	b.n	8000bf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	21ff      	movs	r1, #255	; 0xff
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	401a      	ands	r2, r3
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001c      	movs	r4, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	4023      	ands	r3, r4
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	430a      	orrs	r2, r1
 8000bee:	3306      	adds	r3, #6
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	18c3      	adds	r3, r0, r3
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	045b      	lsls	r3, r3, #17
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d301      	bcc.n	8000c20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e010      	b.n	8000c42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SysTick_Config+0x44>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	3a01      	subs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x44>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffbf 	bl	8000c08 <SysTick_Config>
 8000c8a:	0003      	movs	r3, r0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e14f      	b.n	8000f44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <HAL_GPIO_Init+0x28>
 8000cba:	e140      	b.n	8000f3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d005      	beq.n	8000cd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d130      	bne.n	8000d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	2201      	movs	r2, #1
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d017      	beq.n	8000d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d123      	bne.n	8000dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	08da      	lsrs	r2, r3, #3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3208      	adds	r2, #8
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	58d3      	ldr	r3, [r2, r3]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2207      	movs	r2, #7
 8000d90:	4013      	ands	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2107      	movs	r1, #7
 8000daa:	400b      	ands	r3, r1
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	6939      	ldr	r1, [r7, #16]
 8000dc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	401a      	ands	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	23c0      	movs	r3, #192	; 0xc0
 8000e00:	029b      	lsls	r3, r3, #10
 8000e02:	4013      	ands	r3, r2
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x174>
 8000e06:	e09a      	b.n	8000f3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <HAL_GPIO_Init+0x2c8>)
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <HAL_GPIO_Init+0x2c8>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	619a      	str	r2, [r3, #24]
 8000e14:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_GPIO_Init+0x2c8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e20:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <HAL_GPIO_Init+0x2cc>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	589b      	ldr	r3, [r3, r2]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	2390      	movs	r3, #144	; 0x90
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x1e2>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x1de>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a43      	ldr	r2, [pc, #268]	; (8000f68 <HAL_GPIO_Init+0x2d4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x1da>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <HAL_GPIO_Init+0x2d8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x1d6>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x1e4>
 8000e76:	2300      	movs	r3, #0
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x2cc>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	029b      	lsls	r3, r3, #10
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	035b      	lsls	r3, r3, #13
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	039b      	lsls	r3, r3, #14
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_GPIO_Init+0x2dc>)
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	40da      	lsrs	r2, r3
 8000f4c:	1e13      	subs	r3, r2, #0
 8000f4e:	d000      	beq.n	8000f52 <HAL_GPIO_Init+0x2be>
 8000f50:	e6a8      	b.n	8000ca4 <HAL_GPIO_Init+0x10>
  } 
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b006      	add	sp, #24
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000c00 	.word	0x48000c00
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	1cbb      	adds	r3, r7, #2
 8000f80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	1cba      	adds	r2, r7, #2
 8000f88:	8812      	ldrh	r2, [r2, #0]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d004      	beq.n	8000f98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
  }
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	0008      	movs	r0, r1
 8000fb8:	0011      	movs	r1, r2
 8000fba:	1cbb      	adds	r3, r7, #2
 8000fbc:	1c02      	adds	r2, r0, #0
 8000fbe:	801a      	strh	r2, [r3, #0]
 8000fc0:	1c7b      	adds	r3, r7, #1
 8000fc2:	1c0a      	adds	r2, r1, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc6:	1c7b      	adds	r3, r7, #1
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	1cbb      	adds	r3, r7, #2
 8000fd0:	881a      	ldrh	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd6:	e003      	b.n	8000fe0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd8:	1cbb      	adds	r3, r7, #2
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e301      	b.n	80015fe <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4013      	ands	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x1e>
 8001004:	e08d      	b.n	8001122 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001006:	4bc3      	ldr	r3, [pc, #780]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	220c      	movs	r2, #12
 800100c:	4013      	ands	r3, r2
 800100e:	2b04      	cmp	r3, #4
 8001010:	d00e      	beq.n	8001030 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001012:	4bc0      	ldr	r3, [pc, #768]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	220c      	movs	r2, #12
 8001018:	4013      	ands	r3, r2
 800101a:	2b08      	cmp	r3, #8
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x64>
 800101e:	4bbd      	ldr	r3, [pc, #756]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	025b      	lsls	r3, r3, #9
 8001026:	401a      	ands	r2, r3
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	429a      	cmp	r2, r3
 800102e:	d10d      	bne.n	800104c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4bb8      	ldr	r3, [pc, #736]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	4013      	ands	r3, r2
 800103a:	d100      	bne.n	800103e <HAL_RCC_OscConfig+0x56>
 800103c:	e070      	b.n	8001120 <HAL_RCC_OscConfig+0x138>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d000      	beq.n	8001048 <HAL_RCC_OscConfig+0x60>
 8001046:	e06b      	b.n	8001120 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e2d8      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_RCC_OscConfig+0x7c>
 8001054:	4baf      	ldr	r3, [pc, #700]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4bae      	ldr	r3, [pc, #696]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0249      	lsls	r1, r1, #9
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e02f      	b.n	80010c4 <HAL_RCC_OscConfig+0xdc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x9e>
 800106c:	4ba9      	ldr	r3, [pc, #676]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4ba8      	ldr	r3, [pc, #672]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001072:	49a9      	ldr	r1, [pc, #676]	; (8001318 <HAL_RCC_OscConfig+0x330>)
 8001074:	400a      	ands	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	4ba6      	ldr	r3, [pc, #664]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4ba5      	ldr	r3, [pc, #660]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800107e:	49a7      	ldr	r1, [pc, #668]	; (800131c <HAL_RCC_OscConfig+0x334>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e01e      	b.n	80010c4 <HAL_RCC_OscConfig+0xdc>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0xc4>
 800108e:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	02c9      	lsls	r1, r1, #11
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b9c      	ldr	r3, [pc, #624]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xdc>
 80010ac:	4b99      	ldr	r3, [pc, #612]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b98      	ldr	r3, [pc, #608]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	4999      	ldr	r1, [pc, #612]	; (8001318 <HAL_RCC_OscConfig+0x330>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4b96      	ldr	r3, [pc, #600]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b95      	ldr	r3, [pc, #596]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010be:	4997      	ldr	r1, [pc, #604]	; (800131c <HAL_RCC_OscConfig+0x334>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d014      	beq.n	80010f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fd00 	bl	8000ad0 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fcfb 	bl	8000ad0 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e28a      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e8:	4b8a      	ldr	r3, [pc, #552]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0xee>
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fceb 	bl	8000ad0 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fce6 	bl	8000ad0 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e275      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b80      	ldr	r3, [pc, #512]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x118>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x146>
 800112c:	e069      	b.n	8001202 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800112e:	4b79      	ldr	r3, [pc, #484]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	220c      	movs	r2, #12
 8001134:	4013      	ands	r3, r2
 8001136:	d00b      	beq.n	8001150 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	220c      	movs	r2, #12
 800113e:	4013      	ands	r3, r2
 8001140:	2b08      	cmp	r3, #8
 8001142:	d11c      	bne.n	800117e <HAL_RCC_OscConfig+0x196>
 8001144:	4b73      	ldr	r3, [pc, #460]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	4013      	ands	r3, r2
 800114e:	d116      	bne.n	800117e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2202      	movs	r2, #2
 8001156:	4013      	ands	r3, r2
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x17e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e24b      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	22f8      	movs	r2, #248	; 0xf8
 800116c:	4393      	bics	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	00da      	lsls	r2, r3, #3
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117c:	e041      	b.n	8001202 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d024      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fc9d 	bl	8000ad0 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc98 	bl	8000ad0 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e227      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f1      	beq.n	800119c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b56      	ldr	r3, [pc, #344]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	22f8      	movs	r2, #248	; 0xf8
 80011be:	4393      	bics	r3, r2
 80011c0:	0019      	movs	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	4b52      	ldr	r3, [pc, #328]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e018      	b.n	8001202 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc78 	bl	8000ad0 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fc73 	bl	8000ad0 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e202      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f8:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f1      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2208      	movs	r2, #8
 8001208:	4013      	ands	r3, r2
 800120a:	d036      	beq.n	800127a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d019      	beq.n	8001248 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001214:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff fc56 	bl	8000ad0 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff fc51 	bl	8000ad0 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1e0      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d0f1      	beq.n	800122a <HAL_RCC_OscConfig+0x242>
 8001246:	e018      	b.n	800127a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800124a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800124e:	2101      	movs	r1, #1
 8001250:	438a      	bics	r2, r1
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fc3c 	bl	8000ad0 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc37 	bl	8000ad0 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e1c6      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2202      	movs	r2, #2
 8001276:	4013      	ands	r3, r2
 8001278:	d1f1      	bne.n	800125e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x29e>
 8001284:	e0b4      	b.n	80013f0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001286:	201f      	movs	r0, #31
 8001288:	183b      	adds	r3, r7, r0
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	055b      	lsls	r3, r3, #21
 8001296:	4013      	ands	r3, r2
 8001298:	d110      	bne.n	80012bc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0549      	lsls	r1, r1, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	61da      	str	r2, [r3, #28]
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012b6:	183b      	adds	r3, r7, r0
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4013      	ands	r3, r2
 80012c6:	d11a      	bne.n	80012fe <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	0049      	lsls	r1, r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fbfb 	bl	8000ad0 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e0:	f7ff fbf6 	bl	8000ad0 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e185      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x338>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0x33c>
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_RCC_OscConfig+0x32c>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	621a      	str	r2, [r3, #32]
 8001312:	e035      	b.n	8001380 <HAL_RCC_OscConfig+0x398>
 8001314:	40021000 	.word	0x40021000
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	fffbffff 	.word	0xfffbffff
 8001320:	40007000 	.word	0x40007000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x35e>
 800132c:	4bb6      	ldr	r3, [pc, #728]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4bb5      	ldr	r3, [pc, #724]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	4bb3      	ldr	r3, [pc, #716]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	4bb2      	ldr	r3, [pc, #712]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800133e:	2104      	movs	r1, #4
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x398>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x380>
 800134e:	4bae      	ldr	r3, [pc, #696]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4bad      	ldr	r3, [pc, #692]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	621a      	str	r2, [r3, #32]
 800135a:	4bab      	ldr	r3, [pc, #684]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4baa      	ldr	r3, [pc, #680]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x398>
 8001368:	4ba7      	ldr	r3, [pc, #668]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	4ba6      	ldr	r3, [pc, #664]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800136e:	2101      	movs	r1, #1
 8001370:	438a      	bics	r2, r1
 8001372:	621a      	str	r2, [r3, #32]
 8001374:	4ba4      	ldr	r3, [pc, #656]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4ba3      	ldr	r3, [pc, #652]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800137a:	2104      	movs	r1, #4
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fba2 	bl	8000ad0 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e009      	b.n	80013a6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb9d 	bl	8000ad0 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a9b      	ldr	r2, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x624>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e12b      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	4b98      	ldr	r3, [pc, #608]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x3aa>
 80013b0:	e013      	b.n	80013da <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb8d 	bl	8000ad0 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb88 	bl	8000ad0 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a91      	ldr	r2, [pc, #580]	; (800160c <HAL_RCC_OscConfig+0x624>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e116      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	4b87      	ldr	r3, [pc, #540]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80013ea:	4989      	ldr	r1, [pc, #548]	; (8001610 <HAL_RCC_OscConfig+0x628>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2210      	movs	r2, #16
 80013f6:	4013      	ands	r3, r2
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12a      	bne.n	8001458 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001408:	2104      	movs	r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800140e:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb59 	bl	8000ad0 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001424:	f7ff fb54 	bl	8000ad0 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0e3      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001436:	4b74      	ldr	r3, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0f1      	beq.n	8001424 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001440:	4b71      	ldr	r3, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	22f8      	movs	r2, #248	; 0xf8
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	00da      	lsls	r2, r3, #3
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e034      	b.n	80014c2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	3305      	adds	r3, #5
 800145e:	d111      	bne.n	8001484 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e01e      	b.n	80014c2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800148a:	2104      	movs	r1, #4
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001494:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb18 	bl	8000ad0 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014a6:	f7ff fb13 	bl	8000ad0 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0a2      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f1      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x4e4>
 80014ca:	e097      	b.n	80015fc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	220c      	movs	r2, #12
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x4f2>
 80014d8:	e06b      	b.n	80015b2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d14c      	bne.n	800157c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80014e8:	494a      	ldr	r1, [pc, #296]	; (8001614 <HAL_RCC_OscConfig+0x62c>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff faef 	bl	8000ad0 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff faea 	bl	8000ad0 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e079      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	049b      	lsls	r3, r3, #18
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	220f      	movs	r2, #15
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <HAL_RCC_OscConfig+0x630>)
 8001530:	4013      	ands	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	431a      	orrs	r2, r3
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0449      	lsls	r1, r1, #17
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fabd 	bl	8000ad0 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fab8 	bl	8000ad0 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e047      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	049b      	lsls	r3, r3, #18
 8001576:	4013      	ands	r3, r2
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x574>
 800157a:	e03f      	b.n	80015fc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 8001582:	4924      	ldr	r1, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x62c>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faa2 	bl	8000ad0 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fa9d 	bl	8000ad0 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e02c      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	049b      	lsls	r3, r3, #18
 80015ac:	4013      	ands	r3, r2
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x5aa>
 80015b0:	e024      	b.n	80015fc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01f      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_OscConfig+0x620>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	025b      	lsls	r3, r3, #9
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d10e      	bne.n	80015f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	220f      	movs	r2, #15
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	23f0      	movs	r3, #240	; 0xf0
 80015ec:	039b      	lsls	r3, r3, #14
 80015ee:	401a      	ands	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b008      	add	sp, #32
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000
 800160c:	00001388 	.word	0x00001388
 8001610:	efffffff 	.word	0xefffffff
 8001614:	feffffff 	.word	0xfeffffff
 8001618:	ffc2ffff 	.word	0xffc2ffff

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b3      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d911      	bls.n	8001662 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e09a      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d015      	beq.n	8001698 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	d006      	beq.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 800167c:	21e0      	movs	r1, #224	; 0xe0
 800167e:	00c9      	lsls	r1, r1, #3
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	22f0      	movs	r2, #240	; 0xf0
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d040      	beq.n	8001724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d114      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06e      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e062      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e05b      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f9ec 	bl	8000ad0 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f9e7 	bl	8000ad0 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_RCC_ClockConfig+0x18c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e042      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	220c      	movs	r2, #12
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1ec      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d211      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e020      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_RCC_ClockConfig+0x190>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001774:	f000 f820 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001778:	0001      	movs	r1, r0
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	220f      	movs	r2, #15
 8001782:	4013      	ands	r3, r2
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x194>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	000a      	movs	r2, r1
 800178a:	40da      	lsrs	r2, r3
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x198>)
 800178e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff f957 	bl	8000a44 <HAL_InitTick>
  
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	00001388 	.word	0x00001388
 80017ac:	fffff8ff 	.word	0xfffff8ff
 80017b0:	080030e8 	.word	0x080030e8
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b08f      	sub	sp, #60	; 0x3c
 80017bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017be:	2314      	movs	r3, #20
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017c6:	c313      	stmia	r3!, {r0, r1, r4}
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017d2:	c313      	stmia	r3!, {r0, r1, r4}
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	220c      	movs	r2, #12
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d002      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x4a>
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d003      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x50>
 8001800:	e02d      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001806:	e02d      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	220f      	movs	r2, #15
 800180e:	4013      	ands	r3, r2
 8001810:	2214      	movs	r2, #20
 8001812:	18ba      	adds	r2, r7, r2
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	220f      	movs	r2, #15
 800181e:	4013      	ands	r3, r2
 8001820:	1d3a      	adds	r2, r7, #4
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	025b      	lsls	r3, r3, #9
 800182c:	4013      	ands	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001834:	f7fe fc72 	bl	800011c <__udivsi3>
 8001838:	0003      	movs	r3, r0
 800183a:	001a      	movs	r2, r3
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	4353      	muls	r3, r2
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
 8001842:	e009      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001846:	000a      	movs	r2, r1
 8001848:	0152      	lsls	r2, r2, #5
 800184a:	1a52      	subs	r2, r2, r1
 800184c:	0193      	lsls	r3, r2, #6
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	185b      	adds	r3, r3, r1
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800185c:	e002      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001862:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b00f      	add	sp, #60	; 0x3c
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	080030c8 	.word	0x080030c8
 8001874:	080030d8 	.word	0x080030d8
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200

08001880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <HAL_RCC_GetHCLKFreq+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001898:	f7ff fff2 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 800189c:	0001      	movs	r1, r0
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	2207      	movs	r2, #7
 80018a6:	4013      	ands	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	000b      	movs	r3, r1
}    
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000
 80018bc:	080030f8 	.word	0x080030f8

080018c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	4013      	ands	r3, r2
 80018da:	d100      	bne.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80018dc:	e08e      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2017      	movs	r0, #23
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	4013      	ands	r3, r2
 80018f0:	d110      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0549      	lsls	r1, r1, #21
 80018fc:	430a      	orrs	r2, r1
 80018fe:	61da      	str	r2, [r3, #28]
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190e:	183b      	adds	r3, r7, r0
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d11a      	bne.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	0049      	lsls	r1, r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff f8cf 	bl	8000ad0 <HAL_GetTick>
 8001932:	0003      	movs	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	e008      	b.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001938:	f7ff f8ca 	bl	8000ad0 <HAL_GetTick>
 800193c:	0002      	movs	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e077      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4013      	ands	r3, r2
 8001954:	d0f0      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d034      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	23c0      	movs	r3, #192	; 0xc0
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4013      	ands	r3, r2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d02c      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0249      	lsls	r1, r1, #9
 800198c:	430a      	orrs	r2, r1
 800198e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001992:	6a1a      	ldr	r2, [r3, #32]
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001996:	492e      	ldr	r1, [pc, #184]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001998:	400a      	ands	r2, r1
 800199a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f891 	bl	8000ad0 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	e009      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f88c 	bl	8000ad0 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e038      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e6:	2317      	movs	r3, #23
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f6:	4918      	ldr	r1, [pc, #96]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	4013      	ands	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	2210      	movs	r2, #16
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	fffffcff 	.word	0xfffffcff
 8001a50:	fffeffff 	.word	0xfffeffff
 8001a54:	00001388 	.word	0x00001388
 8001a58:	efffffff 	.word	0xefffffff

08001a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e042      	b.n	8001af4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	223d      	movs	r2, #61	; 0x3d
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223c      	movs	r2, #60	; 0x3c
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fea3 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223d      	movs	r2, #61	; 0x3d
 8001a8e:	2102      	movs	r1, #2
 8001a90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f000 f871 	bl	8001b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2246      	movs	r2, #70	; 0x46
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223e      	movs	r2, #62	; 0x3e
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223f      	movs	r2, #63	; 0x3f
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2240      	movs	r2, #64	; 0x40
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2241      	movs	r2, #65	; 0x41
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2242      	movs	r2, #66	; 0x42
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2243      	movs	r2, #67	; 0x43
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2244      	movs	r2, #68	; 0x44
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2245      	movs	r2, #69	; 0x45
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	; 0x3d
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	223d      	movs	r2, #61	; 0x3d
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e02d      	b.n	8001b70 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	223d      	movs	r2, #61	; 0x3d
 8001b18:	2102      	movs	r1, #2
 8001b1a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_TIM_Base_Start+0x7c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_TIM_Base_Start+0x3e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_TIM_Base_Start+0x80>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_TIM_Base_Start+0x3e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_TIM_Base_Start+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d111      	bne.n	8001b5e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2207      	movs	r2, #7
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d010      	beq.n	8001b6e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5c:	e007      	b.n	8001b6e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40014000 	.word	0x40014000

08001b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <TIM_Base_SetConfig+0xd0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <TIM_Base_SetConfig+0x20>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <TIM_Base_SetConfig+0xd4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2270      	movs	r2, #112	; 0x70
 8001ba8:	4393      	bics	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <TIM_Base_SetConfig+0xd0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <TIM_Base_SetConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <TIM_Base_SetConfig+0xd4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00f      	beq.n	8001be6 <TIM_Base_SetConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <TIM_Base_SetConfig+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <TIM_Base_SetConfig+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <TIM_Base_SetConfig+0xdc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <TIM_Base_SetConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <TIM_Base_SetConfig+0xe0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d003      	beq.n	8001be6 <TIM_Base_SetConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <TIM_Base_SetConfig+0xe4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <TIM_Base_SetConfig+0xe8>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	001a      	movs	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <TIM_Base_SetConfig+0xd0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00b      	beq.n	8001c3e <TIM_Base_SetConfig+0xba>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <TIM_Base_SetConfig+0xdc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <TIM_Base_SetConfig+0xba>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <TIM_Base_SetConfig+0xe0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d003      	beq.n	8001c3e <TIM_Base_SetConfig+0xba>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <TIM_Base_SetConfig+0xe4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d103      	bne.n	8001c46 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	615a      	str	r2, [r3, #20]
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40002000 	.word	0x40002000
 8001c60:	40014000 	.word	0x40014000
 8001c64:	40014400 	.word	0x40014400
 8001c68:	40014800 	.word	0x40014800
 8001c6c:	fffffcff 	.word	0xfffffcff

08001c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e044      	b.n	8001d0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2274      	movs	r2, #116	; 0x74
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7fe fdbb 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	; 0x24
 8001c9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 f8da 	bl	8001e6c <UART_SetConfig>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e024      	b.n	8001d0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fa0d 	bl	80020ec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	490d      	ldr	r1, [pc, #52]	; (8001d14 <HAL_UART_Init+0xa4>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2108      	movs	r1, #8
 8001cee:	438a      	bics	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 faa5 	bl	8002254 <UART_CheckIdleState>
 8001d0a:	0003      	movs	r3, r0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	fffff7ff 	.word	0xfffff7ff

08001d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	1dbb      	adds	r3, r7, #6
 8001d26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d000      	beq.n	8001d32 <HAL_UART_Transmit+0x1a>
 8001d30:	e096      	b.n	8001e60 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_UART_Transmit+0x28>
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e08e      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	015b      	lsls	r3, r3, #5
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d109      	bne.n	8001d64 <HAL_UART_Transmit+0x4c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e07e      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2274      	movs	r2, #116	; 0x74
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Transmit+0x5a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e077      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2274      	movs	r2, #116	; 0x74
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d88:	f7fe fea2 	bl	8000ad0 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1dba      	adds	r2, r7, #6
 8001d94:	2150      	movs	r1, #80	; 0x50
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1dba      	adds	r2, r7, #6
 8001d9e:	2152      	movs	r1, #82	; 0x52
 8001da0:	8812      	ldrh	r2, [r2, #0]
 8001da2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	015b      	lsls	r3, r3, #5
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d108      	bne.n	8001dc2 <HAL_UART_Transmit+0xaa>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e003      	b.n	8001dca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2274      	movs	r2, #116	; 0x74
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001dd2:	e02d      	b.n	8001e30 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	0013      	movs	r3, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	f000 fa7f 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e039      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	05d2      	lsls	r2, r2, #23
 8001dfe:	0dd2      	lsrs	r2, r2, #23
 8001e00:	b292      	uxth	r2, r2
 8001e02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	3302      	adds	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e008      	b.n	8001e1e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b292      	uxth	r2, r2
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2252      	movs	r2, #82	; 0x52
 8001e22:	5a9b      	ldrh	r3, [r3, r2]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b299      	uxth	r1, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2252      	movs	r2, #82	; 0x52
 8001e2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2252      	movs	r2, #82	; 0x52
 8001e34:	5a9b      	ldrh	r3, [r3, r2]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1cb      	bne.n	8001dd4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	0013      	movs	r3, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	f000 fa4b 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e005      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b008      	add	sp, #32
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e74:	231e      	movs	r3, #30
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a8d      	ldr	r2, [pc, #564]	; (80020d0 <UART_SetConfig+0x264>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a88      	ldr	r2, [pc, #544]	; (80020d4 <UART_SetConfig+0x268>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a7f      	ldr	r2, [pc, #508]	; (80020d8 <UART_SetConfig+0x26c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7b      	ldr	r2, [pc, #492]	; (80020dc <UART_SetConfig+0x270>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d127      	bne.n	8001f42 <UART_SetConfig+0xd6>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <UART_SetConfig+0x274>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d00d      	beq.n	8001f1a <UART_SetConfig+0xae>
 8001efe:	d81b      	bhi.n	8001f38 <UART_SetConfig+0xcc>
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d014      	beq.n	8001f2e <UART_SetConfig+0xc2>
 8001f04:	d818      	bhi.n	8001f38 <UART_SetConfig+0xcc>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <UART_SetConfig+0xa4>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00a      	beq.n	8001f24 <UART_SetConfig+0xb8>
 8001f0e:	e013      	b.n	8001f38 <UART_SetConfig+0xcc>
 8001f10:	231f      	movs	r3, #31
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e021      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f1a:	231f      	movs	r3, #31
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e01c      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2204      	movs	r2, #4
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e017      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f2e:	231f      	movs	r3, #31
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2208      	movs	r2, #8
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e012      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f38:	231f      	movs	r3, #31
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e00d      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <UART_SetConfig+0x278>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d104      	bne.n	8001f56 <UART_SetConfig+0xea>
 8001f4c:	231f      	movs	r3, #31
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e003      	b.n	8001f5e <UART_SetConfig+0xf2>
 8001f56:	231f      	movs	r3, #31
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d15d      	bne.n	8002026 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d015      	beq.n	8001fa0 <UART_SetConfig+0x134>
 8001f74:	dc18      	bgt.n	8001fa8 <UART_SetConfig+0x13c>
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d00d      	beq.n	8001f96 <UART_SetConfig+0x12a>
 8001f7a:	dc15      	bgt.n	8001fa8 <UART_SetConfig+0x13c>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <UART_SetConfig+0x11a>
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d005      	beq.n	8001f90 <UART_SetConfig+0x124>
 8001f84:	e010      	b.n	8001fa8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f86:	f7ff fc85 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        break;
 8001f8e:	e012      	b.n	8001fb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <UART_SetConfig+0x27c>)
 8001f92:	61bb      	str	r3, [r7, #24]
        break;
 8001f94:	e00f      	b.n	8001fb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f96:	f7ff fc0f 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
        break;
 8001f9e:	e00a      	b.n	8001fb6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	61bb      	str	r3, [r7, #24]
        break;
 8001fa6:	e006      	b.n	8001fb6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fac:	231e      	movs	r3, #30
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
        break;
 8001fb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <UART_SetConfig+0x152>
 8001fbc:	e07b      	b.n	80020b6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	005a      	lsls	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	18d2      	adds	r2, r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0019      	movs	r1, r3
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	f7fe f8a3 	bl	800011c <__udivsi3>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	d91c      	bls.n	800201c <UART_SetConfig+0x1b0>
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d217      	bcs.n	800201c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	200e      	movs	r0, #14
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	b299      	uxth	r1, r3
 8002006:	183b      	adds	r3, r7, r0
 8002008:	183a      	adds	r2, r7, r0
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	183a      	adds	r2, r7, r0
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e04c      	b.n	80020b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800201c:	231e      	movs	r3, #30
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e047      	b.n	80020b6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d015      	beq.n	800205c <UART_SetConfig+0x1f0>
 8002030:	dc18      	bgt.n	8002064 <UART_SetConfig+0x1f8>
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00d      	beq.n	8002052 <UART_SetConfig+0x1e6>
 8002036:	dc15      	bgt.n	8002064 <UART_SetConfig+0x1f8>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <UART_SetConfig+0x1d6>
 800203c:	2b02      	cmp	r3, #2
 800203e:	d005      	beq.n	800204c <UART_SetConfig+0x1e0>
 8002040:	e010      	b.n	8002064 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002042:	f7ff fc27 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        break;
 800204a:	e012      	b.n	8002072 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <UART_SetConfig+0x27c>)
 800204e:	61bb      	str	r3, [r7, #24]
        break;
 8002050:	e00f      	b.n	8002072 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002052:	f7ff fbb1 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]
        break;
 800205a:	e00a      	b.n	8002072 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	61bb      	str	r3, [r7, #24]
        break;
 8002062:	e006      	b.n	8002072 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002068:	231e      	movs	r3, #30
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
        break;
 8002070:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01e      	beq.n	80020b6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	085a      	lsrs	r2, r3, #1
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	18d2      	adds	r2, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f7fe f847 	bl	800011c <__udivsi3>
 800208e:	0003      	movs	r3, r0
 8002090:	b29b      	uxth	r3, r3
 8002092:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d909      	bls.n	80020ae <UART_SetConfig+0x242>
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d204      	bcs.n	80020ae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e003      	b.n	80020b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80020ae:	231e      	movs	r3, #30
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80020c2:	231e      	movs	r3, #30
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b008      	add	sp, #32
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffff69f3 	.word	0xffff69f3
 80020d4:	ffffcfff 	.word	0xffffcfff
 80020d8:	fffff4ff 	.word	0xfffff4ff
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40004400 	.word	0x40004400
 80020e8:	007a1200 	.word	0x007a1200

080020ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d00b      	beq.n	8002116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <UART_AdvFeatureConfig+0x144>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d00b      	beq.n	8002138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a43      	ldr	r2, [pc, #268]	; (8002234 <UART_AdvFeatureConfig+0x148>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2204      	movs	r2, #4
 800213e:	4013      	ands	r3, r2
 8002140:	d00b      	beq.n	800215a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <UART_AdvFeatureConfig+0x14c>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2208      	movs	r2, #8
 8002160:	4013      	ands	r3, r2
 8002162:	d00b      	beq.n	800217c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <UART_AdvFeatureConfig+0x150>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d00b      	beq.n	800219e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <UART_AdvFeatureConfig+0x154>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	2220      	movs	r2, #32
 80021a4:	4013      	ands	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <UART_AdvFeatureConfig+0x158>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	d01d      	beq.n	8002206 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <UART_AdvFeatureConfig+0x15c>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	035b      	lsls	r3, r3, #13
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10b      	bne.n	8002206 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a15      	ldr	r2, [pc, #84]	; (800224c <UART_AdvFeatureConfig+0x160>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	4013      	ands	r3, r2
 800220e:	d00b      	beq.n	8002228 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <UART_AdvFeatureConfig+0x164>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
  }
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	fffdffff 	.word	0xfffdffff
 8002234:	fffeffff 	.word	0xfffeffff
 8002238:	fffbffff 	.word	0xfffbffff
 800223c:	ffff7fff 	.word	0xffff7fff
 8002240:	ffffefff 	.word	0xffffefff
 8002244:	ffffdfff 	.word	0xffffdfff
 8002248:	ffefffff 	.word	0xffefffff
 800224c:	ff9fffff 	.word	0xff9fffff
 8002250:	fff7ffff 	.word	0xfff7ffff

08002254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	2100      	movs	r1, #0
 8002262:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002264:	f7fe fc34 	bl	8000ad0 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2208      	movs	r2, #8
 8002274:	4013      	ands	r3, r2
 8002276:	2b08      	cmp	r3, #8
 8002278:	d10c      	bne.n	8002294 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	0391      	lsls	r1, r2, #14
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <UART_CheckIdleState+0x8c>)
 8002284:	9200      	str	r2, [sp, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	f000 f82c 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e021      	b.n	80022d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d10c      	bne.n	80022bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	03d1      	lsls	r1, r2, #15
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <UART_CheckIdleState+0x8c>)
 80022ac:	9200      	str	r2, [sp, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f000 f818 	bl	80022e4 <UART_WaitOnFlagUntilTimeout>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d001      	beq.n	80022bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e00d      	b.n	80022d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2274      	movs	r2, #116	; 0x74
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	01ffffff 	.word	0x01ffffff

080022e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f4:	e0a3      	b.n	800243e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f8:	3301      	adds	r3, #1
 80022fa:	d100      	bne.n	80022fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80022fc:	e09f      	b.n	800243e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe fbe7 	bl	8000ad0 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <UART_WaitOnFlagUntilTimeout+0x30>
 800230e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002310:	2b00      	cmp	r3, #0
 8002312:	d13d      	bne.n	8002390 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002314:	f3ef 8310 	mrs	r3, PRIMASK
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800231c:	647b      	str	r3, [r7, #68]	; 0x44
 800231e:	2301      	movs	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	f383 8810 	msr	PRIMASK, r3
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	494c      	ldr	r1, [pc, #304]	; (8002468 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002336:	400a      	ands	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	f383 8810 	msr	PRIMASK, r3
}
 8002344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002346:	f3ef 8310 	mrs	r3, PRIMASK
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
 8002350:	2301      	movs	r3, #1
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	f383 8810 	msr	PRIMASK, r3
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2101      	movs	r1, #1
 8002368:	438a      	bics	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002372:	f383 8810 	msr	PRIMASK, r3
}
 8002376:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2274      	movs	r2, #116	; 0x74
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e067      	b.n	8002460 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2204      	movs	r2, #4
 8002398:	4013      	ands	r3, r2
 800239a:	d050      	beq.n	800243e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	401a      	ands	r2, r3
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d146      	bne.n	800243e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ba:	f3ef 8310 	mrs	r3, PRIMASK
 80023be:	613b      	str	r3, [r7, #16]
  return(result);
 80023c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c4:	2301      	movs	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f383 8810 	msr	PRIMASK, r3
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4923      	ldr	r1, [pc, #140]	; (8002468 <UART_WaitOnFlagUntilTimeout+0x184>)
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f383 8810 	msr	PRIMASK, r3
}
 80023ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ec:	f3ef 8310 	mrs	r3, PRIMASK
 80023f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80023f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f6:	2301      	movs	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f383 8810 	msr	PRIMASK, r3
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	438a      	bics	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f383 8810 	msr	PRIMASK, r3
}
 800241c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	2120      	movs	r1, #32
 8002430:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2274      	movs	r2, #116	; 0x74
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e010      	b.n	8002460 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	4013      	ands	r3, r2
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	425a      	negs	r2, r3
 800244e:	4153      	adcs	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	001a      	movs	r2, r3
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d100      	bne.n	800245e <UART_WaitOnFlagUntilTimeout+0x17a>
 800245c:	e74b      	b.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b014      	add	sp, #80	; 0x50
 8002466:	bd80      	pop	{r7, pc}
 8002468:	fffffe5f 	.word	0xfffffe5f

0800246c <__errno>:
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <__errno+0x8>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	4770      	bx	lr
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	2000000c 	.word	0x2000000c

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4d0c      	ldr	r5, [pc, #48]	; (80024b0 <__libc_init_array+0x38>)
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	2600      	movs	r6, #0
 800248a:	f000 fc8b 	bl	8002da4 <_init>
 800248e:	4d0a      	ldr	r5, [pc, #40]	; (80024b8 <__libc_init_array+0x40>)
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	00b3      	lsls	r3, r6, #2
 800249e:	58eb      	ldr	r3, [r5, r3]
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	00b3      	lsls	r3, r6, #2
 80024a8:	58eb      	ldr	r3, [r5, r3]
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	08003134 	.word	0x08003134
 80024b4:	08003134 	.word	0x08003134
 80024b8:	08003134 	.word	0x08003134
 80024bc:	08003138 	.word	0x08003138

080024c0 <memcpy>:
 80024c0:	2300      	movs	r3, #0
 80024c2:	b510      	push	{r4, lr}
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d100      	bne.n	80024ca <memcpy+0xa>
 80024c8:	bd10      	pop	{r4, pc}
 80024ca:	5ccc      	ldrb	r4, [r1, r3]
 80024cc:	54c4      	strb	r4, [r0, r3]
 80024ce:	3301      	adds	r3, #1
 80024d0:	e7f8      	b.n	80024c4 <memcpy+0x4>

080024d2 <memset>:
 80024d2:	0003      	movs	r3, r0
 80024d4:	1882      	adds	r2, r0, r2
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d100      	bne.n	80024dc <memset+0xa>
 80024da:	4770      	bx	lr
 80024dc:	7019      	strb	r1, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	e7f9      	b.n	80024d6 <memset+0x4>
	...

080024e4 <siprintf>:
 80024e4:	b40e      	push	{r1, r2, r3}
 80024e6:	b500      	push	{lr}
 80024e8:	490b      	ldr	r1, [pc, #44]	; (8002518 <siprintf+0x34>)
 80024ea:	b09c      	sub	sp, #112	; 0x70
 80024ec:	ab1d      	add	r3, sp, #116	; 0x74
 80024ee:	9002      	str	r0, [sp, #8]
 80024f0:	9006      	str	r0, [sp, #24]
 80024f2:	9107      	str	r1, [sp, #28]
 80024f4:	9104      	str	r1, [sp, #16]
 80024f6:	4809      	ldr	r0, [pc, #36]	; (800251c <siprintf+0x38>)
 80024f8:	4909      	ldr	r1, [pc, #36]	; (8002520 <siprintf+0x3c>)
 80024fa:	cb04      	ldmia	r3!, {r2}
 80024fc:	9105      	str	r1, [sp, #20]
 80024fe:	6800      	ldr	r0, [r0, #0]
 8002500:	a902      	add	r1, sp, #8
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	f000 f870 	bl	80025e8 <_svfiprintf_r>
 8002508:	2300      	movs	r3, #0
 800250a:	9a02      	ldr	r2, [sp, #8]
 800250c:	7013      	strb	r3, [r2, #0]
 800250e:	b01c      	add	sp, #112	; 0x70
 8002510:	bc08      	pop	{r3}
 8002512:	b003      	add	sp, #12
 8002514:	4718      	bx	r3
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	7fffffff 	.word	0x7fffffff
 800251c:	2000000c 	.word	0x2000000c
 8002520:	ffff0208 	.word	0xffff0208

08002524 <__ssputs_r>:
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	688e      	ldr	r6, [r1, #8]
 8002528:	b085      	sub	sp, #20
 800252a:	0007      	movs	r7, r0
 800252c:	000c      	movs	r4, r1
 800252e:	9203      	str	r2, [sp, #12]
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	429e      	cmp	r6, r3
 8002534:	d83c      	bhi.n	80025b0 <__ssputs_r+0x8c>
 8002536:	2390      	movs	r3, #144	; 0x90
 8002538:	898a      	ldrh	r2, [r1, #12]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	421a      	tst	r2, r3
 800253e:	d034      	beq.n	80025aa <__ssputs_r+0x86>
 8002540:	6909      	ldr	r1, [r1, #16]
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	6960      	ldr	r0, [r4, #20]
 8002546:	1a5b      	subs	r3, r3, r1
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2303      	movs	r3, #3
 800254c:	4343      	muls	r3, r0
 800254e:	0fdd      	lsrs	r5, r3, #31
 8002550:	18ed      	adds	r5, r5, r3
 8002552:	9b01      	ldr	r3, [sp, #4]
 8002554:	9802      	ldr	r0, [sp, #8]
 8002556:	3301      	adds	r3, #1
 8002558:	181b      	adds	r3, r3, r0
 800255a:	106d      	asrs	r5, r5, #1
 800255c:	42ab      	cmp	r3, r5
 800255e:	d900      	bls.n	8002562 <__ssputs_r+0x3e>
 8002560:	001d      	movs	r5, r3
 8002562:	0553      	lsls	r3, r2, #21
 8002564:	d532      	bpl.n	80025cc <__ssputs_r+0xa8>
 8002566:	0029      	movs	r1, r5
 8002568:	0038      	movs	r0, r7
 800256a:	f000 fb49 	bl	8002c00 <_malloc_r>
 800256e:	1e06      	subs	r6, r0, #0
 8002570:	d109      	bne.n	8002586 <__ssputs_r+0x62>
 8002572:	230c      	movs	r3, #12
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	2001      	movs	r0, #1
 800257a:	89a2      	ldrh	r2, [r4, #12]
 800257c:	4240      	negs	r0, r0
 800257e:	4313      	orrs	r3, r2
 8002580:	81a3      	strh	r3, [r4, #12]
 8002582:	b005      	add	sp, #20
 8002584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002586:	9a02      	ldr	r2, [sp, #8]
 8002588:	6921      	ldr	r1, [r4, #16]
 800258a:	f7ff ff99 	bl	80024c0 <memcpy>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <__ssputs_r+0xc0>)
 8002592:	401a      	ands	r2, r3
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	4313      	orrs	r3, r2
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	6126      	str	r6, [r4, #16]
 800259e:	18f6      	adds	r6, r6, r3
 80025a0:	6026      	str	r6, [r4, #0]
 80025a2:	6165      	str	r5, [r4, #20]
 80025a4:	9e01      	ldr	r6, [sp, #4]
 80025a6:	1aed      	subs	r5, r5, r3
 80025a8:	60a5      	str	r5, [r4, #8]
 80025aa:	9b01      	ldr	r3, [sp, #4]
 80025ac:	429e      	cmp	r6, r3
 80025ae:	d900      	bls.n	80025b2 <__ssputs_r+0x8e>
 80025b0:	9e01      	ldr	r6, [sp, #4]
 80025b2:	0032      	movs	r2, r6
 80025b4:	9903      	ldr	r1, [sp, #12]
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	f000 faa3 	bl	8002b02 <memmove>
 80025bc:	68a3      	ldr	r3, [r4, #8]
 80025be:	2000      	movs	r0, #0
 80025c0:	1b9b      	subs	r3, r3, r6
 80025c2:	60a3      	str	r3, [r4, #8]
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	199e      	adds	r6, r3, r6
 80025c8:	6026      	str	r6, [r4, #0]
 80025ca:	e7da      	b.n	8002582 <__ssputs_r+0x5e>
 80025cc:	002a      	movs	r2, r5
 80025ce:	0038      	movs	r0, r7
 80025d0:	f000 fb8c 	bl	8002cec <_realloc_r>
 80025d4:	1e06      	subs	r6, r0, #0
 80025d6:	d1e0      	bne.n	800259a <__ssputs_r+0x76>
 80025d8:	0038      	movs	r0, r7
 80025da:	6921      	ldr	r1, [r4, #16]
 80025dc:	f000 faa4 	bl	8002b28 <_free_r>
 80025e0:	e7c7      	b.n	8002572 <__ssputs_r+0x4e>
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	fffffb7f 	.word	0xfffffb7f

080025e8 <_svfiprintf_r>:
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	b0a1      	sub	sp, #132	; 0x84
 80025ec:	9003      	str	r0, [sp, #12]
 80025ee:	001d      	movs	r5, r3
 80025f0:	898b      	ldrh	r3, [r1, #12]
 80025f2:	000f      	movs	r7, r1
 80025f4:	0016      	movs	r6, r2
 80025f6:	061b      	lsls	r3, r3, #24
 80025f8:	d511      	bpl.n	800261e <_svfiprintf_r+0x36>
 80025fa:	690b      	ldr	r3, [r1, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10e      	bne.n	800261e <_svfiprintf_r+0x36>
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f000 fafd 	bl	8002c00 <_malloc_r>
 8002606:	6038      	str	r0, [r7, #0]
 8002608:	6138      	str	r0, [r7, #16]
 800260a:	2800      	cmp	r0, #0
 800260c:	d105      	bne.n	800261a <_svfiprintf_r+0x32>
 800260e:	230c      	movs	r3, #12
 8002610:	9a03      	ldr	r2, [sp, #12]
 8002612:	3801      	subs	r0, #1
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	b021      	add	sp, #132	; 0x84
 8002618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	2300      	movs	r3, #0
 8002620:	ac08      	add	r4, sp, #32
 8002622:	6163      	str	r3, [r4, #20]
 8002624:	3320      	adds	r3, #32
 8002626:	7663      	strb	r3, [r4, #25]
 8002628:	3310      	adds	r3, #16
 800262a:	76a3      	strb	r3, [r4, #26]
 800262c:	9507      	str	r5, [sp, #28]
 800262e:	0035      	movs	r5, r6
 8002630:	782b      	ldrb	r3, [r5, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_svfiprintf_r+0x52>
 8002636:	2b25      	cmp	r3, #37	; 0x25
 8002638:	d147      	bne.n	80026ca <_svfiprintf_r+0xe2>
 800263a:	1bab      	subs	r3, r5, r6
 800263c:	9305      	str	r3, [sp, #20]
 800263e:	42b5      	cmp	r5, r6
 8002640:	d00c      	beq.n	800265c <_svfiprintf_r+0x74>
 8002642:	0032      	movs	r2, r6
 8002644:	0039      	movs	r1, r7
 8002646:	9803      	ldr	r0, [sp, #12]
 8002648:	f7ff ff6c 	bl	8002524 <__ssputs_r>
 800264c:	1c43      	adds	r3, r0, #1
 800264e:	d100      	bne.n	8002652 <_svfiprintf_r+0x6a>
 8002650:	e0ae      	b.n	80027b0 <_svfiprintf_r+0x1c8>
 8002652:	6962      	ldr	r2, [r4, #20]
 8002654:	9b05      	ldr	r3, [sp, #20]
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	6163      	str	r3, [r4, #20]
 800265c:	782b      	ldrb	r3, [r5, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d100      	bne.n	8002664 <_svfiprintf_r+0x7c>
 8002662:	e0a5      	b.n	80027b0 <_svfiprintf_r+0x1c8>
 8002664:	2201      	movs	r2, #1
 8002666:	2300      	movs	r3, #0
 8002668:	4252      	negs	r2, r2
 800266a:	6062      	str	r2, [r4, #4]
 800266c:	a904      	add	r1, sp, #16
 800266e:	3254      	adds	r2, #84	; 0x54
 8002670:	1852      	adds	r2, r2, r1
 8002672:	1c6e      	adds	r6, r5, #1
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	60e3      	str	r3, [r4, #12]
 8002678:	60a3      	str	r3, [r4, #8]
 800267a:	7013      	strb	r3, [r2, #0]
 800267c:	65a3      	str	r3, [r4, #88]	; 0x58
 800267e:	2205      	movs	r2, #5
 8002680:	7831      	ldrb	r1, [r6, #0]
 8002682:	4854      	ldr	r0, [pc, #336]	; (80027d4 <_svfiprintf_r+0x1ec>)
 8002684:	f000 fa32 	bl	8002aec <memchr>
 8002688:	1c75      	adds	r5, r6, #1
 800268a:	2800      	cmp	r0, #0
 800268c:	d11f      	bne.n	80026ce <_svfiprintf_r+0xe6>
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	06d3      	lsls	r3, r2, #27
 8002692:	d504      	bpl.n	800269e <_svfiprintf_r+0xb6>
 8002694:	2353      	movs	r3, #83	; 0x53
 8002696:	a904      	add	r1, sp, #16
 8002698:	185b      	adds	r3, r3, r1
 800269a:	2120      	movs	r1, #32
 800269c:	7019      	strb	r1, [r3, #0]
 800269e:	0713      	lsls	r3, r2, #28
 80026a0:	d504      	bpl.n	80026ac <_svfiprintf_r+0xc4>
 80026a2:	2353      	movs	r3, #83	; 0x53
 80026a4:	a904      	add	r1, sp, #16
 80026a6:	185b      	adds	r3, r3, r1
 80026a8:	212b      	movs	r1, #43	; 0x2b
 80026aa:	7019      	strb	r1, [r3, #0]
 80026ac:	7833      	ldrb	r3, [r6, #0]
 80026ae:	2b2a      	cmp	r3, #42	; 0x2a
 80026b0:	d016      	beq.n	80026e0 <_svfiprintf_r+0xf8>
 80026b2:	0035      	movs	r5, r6
 80026b4:	2100      	movs	r1, #0
 80026b6:	200a      	movs	r0, #10
 80026b8:	68e3      	ldr	r3, [r4, #12]
 80026ba:	782a      	ldrb	r2, [r5, #0]
 80026bc:	1c6e      	adds	r6, r5, #1
 80026be:	3a30      	subs	r2, #48	; 0x30
 80026c0:	2a09      	cmp	r2, #9
 80026c2:	d94e      	bls.n	8002762 <_svfiprintf_r+0x17a>
 80026c4:	2900      	cmp	r1, #0
 80026c6:	d111      	bne.n	80026ec <_svfiprintf_r+0x104>
 80026c8:	e017      	b.n	80026fa <_svfiprintf_r+0x112>
 80026ca:	3501      	adds	r5, #1
 80026cc:	e7b0      	b.n	8002630 <_svfiprintf_r+0x48>
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <_svfiprintf_r+0x1ec>)
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	1ac0      	subs	r0, r0, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4083      	lsls	r3, r0
 80026d8:	4313      	orrs	r3, r2
 80026da:	002e      	movs	r6, r5
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	e7ce      	b.n	800267e <_svfiprintf_r+0x96>
 80026e0:	9b07      	ldr	r3, [sp, #28]
 80026e2:	1d19      	adds	r1, r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	9107      	str	r1, [sp, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db01      	blt.n	80026f0 <_svfiprintf_r+0x108>
 80026ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80026ee:	e004      	b.n	80026fa <_svfiprintf_r+0x112>
 80026f0:	425b      	negs	r3, r3
 80026f2:	60e3      	str	r3, [r4, #12]
 80026f4:	2302      	movs	r3, #2
 80026f6:	4313      	orrs	r3, r2
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	782b      	ldrb	r3, [r5, #0]
 80026fc:	2b2e      	cmp	r3, #46	; 0x2e
 80026fe:	d10a      	bne.n	8002716 <_svfiprintf_r+0x12e>
 8002700:	786b      	ldrb	r3, [r5, #1]
 8002702:	2b2a      	cmp	r3, #42	; 0x2a
 8002704:	d135      	bne.n	8002772 <_svfiprintf_r+0x18a>
 8002706:	9b07      	ldr	r3, [sp, #28]
 8002708:	3502      	adds	r5, #2
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	9207      	str	r2, [sp, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db2b      	blt.n	800276c <_svfiprintf_r+0x184>
 8002714:	9309      	str	r3, [sp, #36]	; 0x24
 8002716:	4e30      	ldr	r6, [pc, #192]	; (80027d8 <_svfiprintf_r+0x1f0>)
 8002718:	2203      	movs	r2, #3
 800271a:	0030      	movs	r0, r6
 800271c:	7829      	ldrb	r1, [r5, #0]
 800271e:	f000 f9e5 	bl	8002aec <memchr>
 8002722:	2800      	cmp	r0, #0
 8002724:	d006      	beq.n	8002734 <_svfiprintf_r+0x14c>
 8002726:	2340      	movs	r3, #64	; 0x40
 8002728:	1b80      	subs	r0, r0, r6
 800272a:	4083      	lsls	r3, r0
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	3501      	adds	r5, #1
 8002730:	4313      	orrs	r3, r2
 8002732:	6023      	str	r3, [r4, #0]
 8002734:	7829      	ldrb	r1, [r5, #0]
 8002736:	2206      	movs	r2, #6
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <_svfiprintf_r+0x1f4>)
 800273a:	1c6e      	adds	r6, r5, #1
 800273c:	7621      	strb	r1, [r4, #24]
 800273e:	f000 f9d5 	bl	8002aec <memchr>
 8002742:	2800      	cmp	r0, #0
 8002744:	d03c      	beq.n	80027c0 <_svfiprintf_r+0x1d8>
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <_svfiprintf_r+0x1f8>)
 8002748:	2b00      	cmp	r3, #0
 800274a:	d125      	bne.n	8002798 <_svfiprintf_r+0x1b0>
 800274c:	2207      	movs	r2, #7
 800274e:	9b07      	ldr	r3, [sp, #28]
 8002750:	3307      	adds	r3, #7
 8002752:	4393      	bics	r3, r2
 8002754:	3308      	adds	r3, #8
 8002756:	9307      	str	r3, [sp, #28]
 8002758:	6963      	ldr	r3, [r4, #20]
 800275a:	9a04      	ldr	r2, [sp, #16]
 800275c:	189b      	adds	r3, r3, r2
 800275e:	6163      	str	r3, [r4, #20]
 8002760:	e765      	b.n	800262e <_svfiprintf_r+0x46>
 8002762:	4343      	muls	r3, r0
 8002764:	0035      	movs	r5, r6
 8002766:	2101      	movs	r1, #1
 8002768:	189b      	adds	r3, r3, r2
 800276a:	e7a6      	b.n	80026ba <_svfiprintf_r+0xd2>
 800276c:	2301      	movs	r3, #1
 800276e:	425b      	negs	r3, r3
 8002770:	e7d0      	b.n	8002714 <_svfiprintf_r+0x12c>
 8002772:	2300      	movs	r3, #0
 8002774:	200a      	movs	r0, #10
 8002776:	001a      	movs	r2, r3
 8002778:	3501      	adds	r5, #1
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	7829      	ldrb	r1, [r5, #0]
 800277e:	1c6e      	adds	r6, r5, #1
 8002780:	3930      	subs	r1, #48	; 0x30
 8002782:	2909      	cmp	r1, #9
 8002784:	d903      	bls.n	800278e <_svfiprintf_r+0x1a6>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0c5      	beq.n	8002716 <_svfiprintf_r+0x12e>
 800278a:	9209      	str	r2, [sp, #36]	; 0x24
 800278c:	e7c3      	b.n	8002716 <_svfiprintf_r+0x12e>
 800278e:	4342      	muls	r2, r0
 8002790:	0035      	movs	r5, r6
 8002792:	2301      	movs	r3, #1
 8002794:	1852      	adds	r2, r2, r1
 8002796:	e7f1      	b.n	800277c <_svfiprintf_r+0x194>
 8002798:	ab07      	add	r3, sp, #28
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	003a      	movs	r2, r7
 800279e:	0021      	movs	r1, r4
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <_svfiprintf_r+0x1fc>)
 80027a2:	9803      	ldr	r0, [sp, #12]
 80027a4:	e000      	b.n	80027a8 <_svfiprintf_r+0x1c0>
 80027a6:	bf00      	nop
 80027a8:	9004      	str	r0, [sp, #16]
 80027aa:	9b04      	ldr	r3, [sp, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	d1d3      	bne.n	8002758 <_svfiprintf_r+0x170>
 80027b0:	89bb      	ldrh	r3, [r7, #12]
 80027b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80027b4:	065b      	lsls	r3, r3, #25
 80027b6:	d400      	bmi.n	80027ba <_svfiprintf_r+0x1d2>
 80027b8:	e72d      	b.n	8002616 <_svfiprintf_r+0x2e>
 80027ba:	2001      	movs	r0, #1
 80027bc:	4240      	negs	r0, r0
 80027be:	e72a      	b.n	8002616 <_svfiprintf_r+0x2e>
 80027c0:	ab07      	add	r3, sp, #28
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	003a      	movs	r2, r7
 80027c6:	0021      	movs	r1, r4
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <_svfiprintf_r+0x1fc>)
 80027ca:	9803      	ldr	r0, [sp, #12]
 80027cc:	f000 f87c 	bl	80028c8 <_printf_i>
 80027d0:	e7ea      	b.n	80027a8 <_svfiprintf_r+0x1c0>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	08003100 	.word	0x08003100
 80027d8:	08003106 	.word	0x08003106
 80027dc:	0800310a 	.word	0x0800310a
 80027e0:	00000000 	.word	0x00000000
 80027e4:	08002525 	.word	0x08002525

080027e8 <_printf_common>:
 80027e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ea:	0015      	movs	r5, r2
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	688a      	ldr	r2, [r1, #8]
 80027f0:	690b      	ldr	r3, [r1, #16]
 80027f2:	000c      	movs	r4, r1
 80027f4:	9000      	str	r0, [sp, #0]
 80027f6:	4293      	cmp	r3, r2
 80027f8:	da00      	bge.n	80027fc <_printf_common+0x14>
 80027fa:	0013      	movs	r3, r2
 80027fc:	0022      	movs	r2, r4
 80027fe:	602b      	str	r3, [r5, #0]
 8002800:	3243      	adds	r2, #67	; 0x43
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	2a00      	cmp	r2, #0
 8002806:	d001      	beq.n	800280c <_printf_common+0x24>
 8002808:	3301      	adds	r3, #1
 800280a:	602b      	str	r3, [r5, #0]
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	d502      	bpl.n	8002818 <_printf_common+0x30>
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	3302      	adds	r3, #2
 8002816:	602b      	str	r3, [r5, #0]
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	2306      	movs	r3, #6
 800281c:	0017      	movs	r7, r2
 800281e:	401f      	ands	r7, r3
 8002820:	421a      	tst	r2, r3
 8002822:	d027      	beq.n	8002874 <_printf_common+0x8c>
 8002824:	0023      	movs	r3, r4
 8002826:	3343      	adds	r3, #67	; 0x43
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	4193      	sbcs	r3, r2
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	0692      	lsls	r2, r2, #26
 8002832:	d430      	bmi.n	8002896 <_printf_common+0xae>
 8002834:	0022      	movs	r2, r4
 8002836:	9901      	ldr	r1, [sp, #4]
 8002838:	9800      	ldr	r0, [sp, #0]
 800283a:	9e08      	ldr	r6, [sp, #32]
 800283c:	3243      	adds	r2, #67	; 0x43
 800283e:	47b0      	blx	r6
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d025      	beq.n	8002890 <_printf_common+0xa8>
 8002844:	2306      	movs	r3, #6
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	682a      	ldr	r2, [r5, #0]
 800284a:	68e1      	ldr	r1, [r4, #12]
 800284c:	2500      	movs	r5, #0
 800284e:	4003      	ands	r3, r0
 8002850:	2b04      	cmp	r3, #4
 8002852:	d103      	bne.n	800285c <_printf_common+0x74>
 8002854:	1a8d      	subs	r5, r1, r2
 8002856:	43eb      	mvns	r3, r5
 8002858:	17db      	asrs	r3, r3, #31
 800285a:	401d      	ands	r5, r3
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	6922      	ldr	r2, [r4, #16]
 8002860:	4293      	cmp	r3, r2
 8002862:	dd01      	ble.n	8002868 <_printf_common+0x80>
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	18ed      	adds	r5, r5, r3
 8002868:	2700      	movs	r7, #0
 800286a:	42bd      	cmp	r5, r7
 800286c:	d120      	bne.n	80028b0 <_printf_common+0xc8>
 800286e:	2000      	movs	r0, #0
 8002870:	e010      	b.n	8002894 <_printf_common+0xac>
 8002872:	3701      	adds	r7, #1
 8002874:	68e3      	ldr	r3, [r4, #12]
 8002876:	682a      	ldr	r2, [r5, #0]
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	42bb      	cmp	r3, r7
 800287c:	ddd2      	ble.n	8002824 <_printf_common+0x3c>
 800287e:	0022      	movs	r2, r4
 8002880:	2301      	movs	r3, #1
 8002882:	9901      	ldr	r1, [sp, #4]
 8002884:	9800      	ldr	r0, [sp, #0]
 8002886:	9e08      	ldr	r6, [sp, #32]
 8002888:	3219      	adds	r2, #25
 800288a:	47b0      	blx	r6
 800288c:	1c43      	adds	r3, r0, #1
 800288e:	d1f0      	bne.n	8002872 <_printf_common+0x8a>
 8002890:	2001      	movs	r0, #1
 8002892:	4240      	negs	r0, r0
 8002894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002896:	2030      	movs	r0, #48	; 0x30
 8002898:	18e1      	adds	r1, r4, r3
 800289a:	3143      	adds	r1, #67	; 0x43
 800289c:	7008      	strb	r0, [r1, #0]
 800289e:	0021      	movs	r1, r4
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	3145      	adds	r1, #69	; 0x45
 80028a4:	7809      	ldrb	r1, [r1, #0]
 80028a6:	18a2      	adds	r2, r4, r2
 80028a8:	3243      	adds	r2, #67	; 0x43
 80028aa:	3302      	adds	r3, #2
 80028ac:	7011      	strb	r1, [r2, #0]
 80028ae:	e7c1      	b.n	8002834 <_printf_common+0x4c>
 80028b0:	0022      	movs	r2, r4
 80028b2:	2301      	movs	r3, #1
 80028b4:	9901      	ldr	r1, [sp, #4]
 80028b6:	9800      	ldr	r0, [sp, #0]
 80028b8:	9e08      	ldr	r6, [sp, #32]
 80028ba:	321a      	adds	r2, #26
 80028bc:	47b0      	blx	r6
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	d0e6      	beq.n	8002890 <_printf_common+0xa8>
 80028c2:	3701      	adds	r7, #1
 80028c4:	e7d1      	b.n	800286a <_printf_common+0x82>
	...

080028c8 <_printf_i>:
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b08b      	sub	sp, #44	; 0x2c
 80028cc:	9206      	str	r2, [sp, #24]
 80028ce:	000a      	movs	r2, r1
 80028d0:	3243      	adds	r2, #67	; 0x43
 80028d2:	9307      	str	r3, [sp, #28]
 80028d4:	9005      	str	r0, [sp, #20]
 80028d6:	9204      	str	r2, [sp, #16]
 80028d8:	7e0a      	ldrb	r2, [r1, #24]
 80028da:	000c      	movs	r4, r1
 80028dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028de:	2a78      	cmp	r2, #120	; 0x78
 80028e0:	d807      	bhi.n	80028f2 <_printf_i+0x2a>
 80028e2:	2a62      	cmp	r2, #98	; 0x62
 80028e4:	d809      	bhi.n	80028fa <_printf_i+0x32>
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d100      	bne.n	80028ec <_printf_i+0x24>
 80028ea:	e0c1      	b.n	8002a70 <_printf_i+0x1a8>
 80028ec:	2a58      	cmp	r2, #88	; 0x58
 80028ee:	d100      	bne.n	80028f2 <_printf_i+0x2a>
 80028f0:	e08c      	b.n	8002a0c <_printf_i+0x144>
 80028f2:	0026      	movs	r6, r4
 80028f4:	3642      	adds	r6, #66	; 0x42
 80028f6:	7032      	strb	r2, [r6, #0]
 80028f8:	e022      	b.n	8002940 <_printf_i+0x78>
 80028fa:	0010      	movs	r0, r2
 80028fc:	3863      	subs	r0, #99	; 0x63
 80028fe:	2815      	cmp	r0, #21
 8002900:	d8f7      	bhi.n	80028f2 <_printf_i+0x2a>
 8002902:	f7fd fc01 	bl	8000108 <__gnu_thumb1_case_shi>
 8002906:	0016      	.short	0x0016
 8002908:	fff6001f 	.word	0xfff6001f
 800290c:	fff6fff6 	.word	0xfff6fff6
 8002910:	001ffff6 	.word	0x001ffff6
 8002914:	fff6fff6 	.word	0xfff6fff6
 8002918:	fff6fff6 	.word	0xfff6fff6
 800291c:	003600a8 	.word	0x003600a8
 8002920:	fff6009a 	.word	0xfff6009a
 8002924:	00b9fff6 	.word	0x00b9fff6
 8002928:	0036fff6 	.word	0x0036fff6
 800292c:	fff6fff6 	.word	0xfff6fff6
 8002930:	009e      	.short	0x009e
 8002932:	0026      	movs	r6, r4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	3642      	adds	r6, #66	; 0x42
 8002938:	1d11      	adds	r1, r2, #4
 800293a:	6019      	str	r1, [r3, #0]
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	7033      	strb	r3, [r6, #0]
 8002940:	2301      	movs	r3, #1
 8002942:	e0a7      	b.n	8002a94 <_printf_i+0x1cc>
 8002944:	6808      	ldr	r0, [r1, #0]
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	1d0a      	adds	r2, r1, #4
 800294a:	0605      	lsls	r5, r0, #24
 800294c:	d50b      	bpl.n	8002966 <_printf_i+0x9e>
 800294e:	680d      	ldr	r5, [r1, #0]
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	2d00      	cmp	r5, #0
 8002954:	da03      	bge.n	800295e <_printf_i+0x96>
 8002956:	232d      	movs	r3, #45	; 0x2d
 8002958:	9a04      	ldr	r2, [sp, #16]
 800295a:	426d      	negs	r5, r5
 800295c:	7013      	strb	r3, [r2, #0]
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <_printf_i+0x21c>)
 8002960:	270a      	movs	r7, #10
 8002962:	9303      	str	r3, [sp, #12]
 8002964:	e01b      	b.n	800299e <_printf_i+0xd6>
 8002966:	680d      	ldr	r5, [r1, #0]
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	0641      	lsls	r1, r0, #25
 800296c:	d5f1      	bpl.n	8002952 <_printf_i+0x8a>
 800296e:	b22d      	sxth	r5, r5
 8002970:	e7ef      	b.n	8002952 <_printf_i+0x8a>
 8002972:	680d      	ldr	r5, [r1, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	1d08      	adds	r0, r1, #4
 8002978:	6018      	str	r0, [r3, #0]
 800297a:	062e      	lsls	r6, r5, #24
 800297c:	d501      	bpl.n	8002982 <_printf_i+0xba>
 800297e:	680d      	ldr	r5, [r1, #0]
 8002980:	e003      	b.n	800298a <_printf_i+0xc2>
 8002982:	066d      	lsls	r5, r5, #25
 8002984:	d5fb      	bpl.n	800297e <_printf_i+0xb6>
 8002986:	680d      	ldr	r5, [r1, #0]
 8002988:	b2ad      	uxth	r5, r5
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <_printf_i+0x21c>)
 800298c:	2708      	movs	r7, #8
 800298e:	9303      	str	r3, [sp, #12]
 8002990:	2a6f      	cmp	r2, #111	; 0x6f
 8002992:	d000      	beq.n	8002996 <_printf_i+0xce>
 8002994:	3702      	adds	r7, #2
 8002996:	0023      	movs	r3, r4
 8002998:	2200      	movs	r2, #0
 800299a:	3343      	adds	r3, #67	; 0x43
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	6863      	ldr	r3, [r4, #4]
 80029a0:	60a3      	str	r3, [r4, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db03      	blt.n	80029ae <_printf_i+0xe6>
 80029a6:	2204      	movs	r2, #4
 80029a8:	6821      	ldr	r1, [r4, #0]
 80029aa:	4391      	bics	r1, r2
 80029ac:	6021      	str	r1, [r4, #0]
 80029ae:	2d00      	cmp	r5, #0
 80029b0:	d102      	bne.n	80029b8 <_printf_i+0xf0>
 80029b2:	9e04      	ldr	r6, [sp, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00c      	beq.n	80029d2 <_printf_i+0x10a>
 80029b8:	9e04      	ldr	r6, [sp, #16]
 80029ba:	0028      	movs	r0, r5
 80029bc:	0039      	movs	r1, r7
 80029be:	f7fd fc33 	bl	8000228 <__aeabi_uidivmod>
 80029c2:	9b03      	ldr	r3, [sp, #12]
 80029c4:	3e01      	subs	r6, #1
 80029c6:	5c5b      	ldrb	r3, [r3, r1]
 80029c8:	7033      	strb	r3, [r6, #0]
 80029ca:	002b      	movs	r3, r5
 80029cc:	0005      	movs	r5, r0
 80029ce:	429f      	cmp	r7, r3
 80029d0:	d9f3      	bls.n	80029ba <_printf_i+0xf2>
 80029d2:	2f08      	cmp	r7, #8
 80029d4:	d109      	bne.n	80029ea <_printf_i+0x122>
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	07db      	lsls	r3, r3, #31
 80029da:	d506      	bpl.n	80029ea <_printf_i+0x122>
 80029dc:	6863      	ldr	r3, [r4, #4]
 80029de:	6922      	ldr	r2, [r4, #16]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	dc02      	bgt.n	80029ea <_printf_i+0x122>
 80029e4:	2330      	movs	r3, #48	; 0x30
 80029e6:	3e01      	subs	r6, #1
 80029e8:	7033      	strb	r3, [r6, #0]
 80029ea:	9b04      	ldr	r3, [sp, #16]
 80029ec:	1b9b      	subs	r3, r3, r6
 80029ee:	6123      	str	r3, [r4, #16]
 80029f0:	9b07      	ldr	r3, [sp, #28]
 80029f2:	0021      	movs	r1, r4
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	9805      	ldr	r0, [sp, #20]
 80029f8:	9b06      	ldr	r3, [sp, #24]
 80029fa:	aa09      	add	r2, sp, #36	; 0x24
 80029fc:	f7ff fef4 	bl	80027e8 <_printf_common>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	d14c      	bne.n	8002a9e <_printf_i+0x1d6>
 8002a04:	2001      	movs	r0, #1
 8002a06:	4240      	negs	r0, r0
 8002a08:	b00b      	add	sp, #44	; 0x2c
 8002a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0c:	3145      	adds	r1, #69	; 0x45
 8002a0e:	700a      	strb	r2, [r1, #0]
 8002a10:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <_printf_i+0x21c>)
 8002a12:	9203      	str	r2, [sp, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	6821      	ldr	r1, [r4, #0]
 8002a18:	ca20      	ldmia	r2!, {r5}
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	0608      	lsls	r0, r1, #24
 8002a1e:	d516      	bpl.n	8002a4e <_printf_i+0x186>
 8002a20:	07cb      	lsls	r3, r1, #31
 8002a22:	d502      	bpl.n	8002a2a <_printf_i+0x162>
 8002a24:	2320      	movs	r3, #32
 8002a26:	4319      	orrs	r1, r3
 8002a28:	6021      	str	r1, [r4, #0]
 8002a2a:	2710      	movs	r7, #16
 8002a2c:	2d00      	cmp	r5, #0
 8002a2e:	d1b2      	bne.n	8002996 <_printf_i+0xce>
 8002a30:	2320      	movs	r3, #32
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	439a      	bics	r2, r3
 8002a36:	6022      	str	r2, [r4, #0]
 8002a38:	e7ad      	b.n	8002996 <_printf_i+0xce>
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	6809      	ldr	r1, [r1, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	6022      	str	r2, [r4, #0]
 8002a42:	0022      	movs	r2, r4
 8002a44:	2178      	movs	r1, #120	; 0x78
 8002a46:	3245      	adds	r2, #69	; 0x45
 8002a48:	7011      	strb	r1, [r2, #0]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <_printf_i+0x220>)
 8002a4c:	e7e1      	b.n	8002a12 <_printf_i+0x14a>
 8002a4e:	0648      	lsls	r0, r1, #25
 8002a50:	d5e6      	bpl.n	8002a20 <_printf_i+0x158>
 8002a52:	b2ad      	uxth	r5, r5
 8002a54:	e7e4      	b.n	8002a20 <_printf_i+0x158>
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	680d      	ldr	r5, [r1, #0]
 8002a5a:	1d10      	adds	r0, r2, #4
 8002a5c:	6949      	ldr	r1, [r1, #20]
 8002a5e:	6018      	str	r0, [r3, #0]
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	062e      	lsls	r6, r5, #24
 8002a64:	d501      	bpl.n	8002a6a <_printf_i+0x1a2>
 8002a66:	6019      	str	r1, [r3, #0]
 8002a68:	e002      	b.n	8002a70 <_printf_i+0x1a8>
 8002a6a:	066d      	lsls	r5, r5, #25
 8002a6c:	d5fb      	bpl.n	8002a66 <_printf_i+0x19e>
 8002a6e:	8019      	strh	r1, [r3, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9e04      	ldr	r6, [sp, #16]
 8002a74:	6123      	str	r3, [r4, #16]
 8002a76:	e7bb      	b.n	80029f0 <_printf_i+0x128>
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	1d11      	adds	r1, r2, #4
 8002a7c:	6019      	str	r1, [r3, #0]
 8002a7e:	6816      	ldr	r6, [r2, #0]
 8002a80:	2100      	movs	r1, #0
 8002a82:	0030      	movs	r0, r6
 8002a84:	6862      	ldr	r2, [r4, #4]
 8002a86:	f000 f831 	bl	8002aec <memchr>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d001      	beq.n	8002a92 <_printf_i+0x1ca>
 8002a8e:	1b80      	subs	r0, r0, r6
 8002a90:	6060      	str	r0, [r4, #4]
 8002a92:	6863      	ldr	r3, [r4, #4]
 8002a94:	6123      	str	r3, [r4, #16]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9a04      	ldr	r2, [sp, #16]
 8002a9a:	7013      	strb	r3, [r2, #0]
 8002a9c:	e7a8      	b.n	80029f0 <_printf_i+0x128>
 8002a9e:	6923      	ldr	r3, [r4, #16]
 8002aa0:	0032      	movs	r2, r6
 8002aa2:	9906      	ldr	r1, [sp, #24]
 8002aa4:	9805      	ldr	r0, [sp, #20]
 8002aa6:	9d07      	ldr	r5, [sp, #28]
 8002aa8:	47a8      	blx	r5
 8002aaa:	1c43      	adds	r3, r0, #1
 8002aac:	d0aa      	beq.n	8002a04 <_printf_i+0x13c>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	079b      	lsls	r3, r3, #30
 8002ab2:	d415      	bmi.n	8002ae0 <_printf_i+0x218>
 8002ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab6:	68e0      	ldr	r0, [r4, #12]
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	daa5      	bge.n	8002a08 <_printf_i+0x140>
 8002abc:	0018      	movs	r0, r3
 8002abe:	e7a3      	b.n	8002a08 <_printf_i+0x140>
 8002ac0:	0022      	movs	r2, r4
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	9906      	ldr	r1, [sp, #24]
 8002ac6:	9805      	ldr	r0, [sp, #20]
 8002ac8:	9e07      	ldr	r6, [sp, #28]
 8002aca:	3219      	adds	r2, #25
 8002acc:	47b0      	blx	r6
 8002ace:	1c43      	adds	r3, r0, #1
 8002ad0:	d098      	beq.n	8002a04 <_printf_i+0x13c>
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	68e3      	ldr	r3, [r4, #12]
 8002ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	42ab      	cmp	r3, r5
 8002adc:	dcf0      	bgt.n	8002ac0 <_printf_i+0x1f8>
 8002ade:	e7e9      	b.n	8002ab4 <_printf_i+0x1ec>
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	e7f7      	b.n	8002ad4 <_printf_i+0x20c>
 8002ae4:	08003111 	.word	0x08003111
 8002ae8:	08003122 	.word	0x08003122

08002aec <memchr>:
 8002aec:	b2c9      	uxtb	r1, r1
 8002aee:	1882      	adds	r2, r0, r2
 8002af0:	4290      	cmp	r0, r2
 8002af2:	d101      	bne.n	8002af8 <memchr+0xc>
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr
 8002af8:	7803      	ldrb	r3, [r0, #0]
 8002afa:	428b      	cmp	r3, r1
 8002afc:	d0fb      	beq.n	8002af6 <memchr+0xa>
 8002afe:	3001      	adds	r0, #1
 8002b00:	e7f6      	b.n	8002af0 <memchr+0x4>

08002b02 <memmove>:
 8002b02:	b510      	push	{r4, lr}
 8002b04:	4288      	cmp	r0, r1
 8002b06:	d902      	bls.n	8002b0e <memmove+0xc>
 8002b08:	188b      	adds	r3, r1, r2
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	d303      	bcc.n	8002b16 <memmove+0x14>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e007      	b.n	8002b22 <memmove+0x20>
 8002b12:	5c8b      	ldrb	r3, [r1, r2]
 8002b14:	5483      	strb	r3, [r0, r2]
 8002b16:	3a01      	subs	r2, #1
 8002b18:	d2fb      	bcs.n	8002b12 <memmove+0x10>
 8002b1a:	bd10      	pop	{r4, pc}
 8002b1c:	5ccc      	ldrb	r4, [r1, r3]
 8002b1e:	54c4      	strb	r4, [r0, r3]
 8002b20:	3301      	adds	r3, #1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d1fa      	bne.n	8002b1c <memmove+0x1a>
 8002b26:	e7f8      	b.n	8002b1a <memmove+0x18>

08002b28 <_free_r>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	0005      	movs	r5, r0
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d010      	beq.n	8002b52 <_free_r+0x2a>
 8002b30:	1f0c      	subs	r4, r1, #4
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da00      	bge.n	8002b3a <_free_r+0x12>
 8002b38:	18e4      	adds	r4, r4, r3
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	f000 f918 	bl	8002d70 <__malloc_lock>
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <_free_r+0x90>)
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <_free_r+0x2c>
 8002b48:	6063      	str	r3, [r4, #4]
 8002b4a:	6014      	str	r4, [r2, #0]
 8002b4c:	0028      	movs	r0, r5
 8002b4e:	f000 f917 	bl	8002d80 <__malloc_unlock>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	42a3      	cmp	r3, r4
 8002b56:	d908      	bls.n	8002b6a <_free_r+0x42>
 8002b58:	6821      	ldr	r1, [r4, #0]
 8002b5a:	1860      	adds	r0, r4, r1
 8002b5c:	4283      	cmp	r3, r0
 8002b5e:	d1f3      	bne.n	8002b48 <_free_r+0x20>
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	1841      	adds	r1, r0, r1
 8002b66:	6021      	str	r1, [r4, #0]
 8002b68:	e7ee      	b.n	8002b48 <_free_r+0x20>
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <_free_r+0x4e>
 8002b72:	42a3      	cmp	r3, r4
 8002b74:	d9f9      	bls.n	8002b6a <_free_r+0x42>
 8002b76:	6811      	ldr	r1, [r2, #0]
 8002b78:	1850      	adds	r0, r2, r1
 8002b7a:	42a0      	cmp	r0, r4
 8002b7c:	d10b      	bne.n	8002b96 <_free_r+0x6e>
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	1809      	adds	r1, r1, r0
 8002b82:	1850      	adds	r0, r2, r1
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	4283      	cmp	r3, r0
 8002b88:	d1e0      	bne.n	8002b4c <_free_r+0x24>
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	1841      	adds	r1, r0, r1
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	6053      	str	r3, [r2, #4]
 8002b94:	e7da      	b.n	8002b4c <_free_r+0x24>
 8002b96:	42a0      	cmp	r0, r4
 8002b98:	d902      	bls.n	8002ba0 <_free_r+0x78>
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	e7d5      	b.n	8002b4c <_free_r+0x24>
 8002ba0:	6821      	ldr	r1, [r4, #0]
 8002ba2:	1860      	adds	r0, r4, r1
 8002ba4:	4283      	cmp	r3, r0
 8002ba6:	d103      	bne.n	8002bb0 <_free_r+0x88>
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	1841      	adds	r1, r0, r1
 8002bae:	6021      	str	r1, [r4, #0]
 8002bb0:	6063      	str	r3, [r4, #4]
 8002bb2:	6054      	str	r4, [r2, #4]
 8002bb4:	e7ca      	b.n	8002b4c <_free_r+0x24>
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	2000023c 	.word	0x2000023c

08002bbc <sbrk_aligned>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	4e0f      	ldr	r6, [pc, #60]	; (8002bfc <sbrk_aligned+0x40>)
 8002bc0:	000d      	movs	r5, r1
 8002bc2:	6831      	ldr	r1, [r6, #0]
 8002bc4:	0004      	movs	r4, r0
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d102      	bne.n	8002bd0 <sbrk_aligned+0x14>
 8002bca:	f000 f8bf 	bl	8002d4c <_sbrk_r>
 8002bce:	6030      	str	r0, [r6, #0]
 8002bd0:	0029      	movs	r1, r5
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	f000 f8ba 	bl	8002d4c <_sbrk_r>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d00a      	beq.n	8002bf2 <sbrk_aligned+0x36>
 8002bdc:	2303      	movs	r3, #3
 8002bde:	1cc5      	adds	r5, r0, #3
 8002be0:	439d      	bics	r5, r3
 8002be2:	42a8      	cmp	r0, r5
 8002be4:	d007      	beq.n	8002bf6 <sbrk_aligned+0x3a>
 8002be6:	1a29      	subs	r1, r5, r0
 8002be8:	0020      	movs	r0, r4
 8002bea:	f000 f8af 	bl	8002d4c <_sbrk_r>
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	d101      	bne.n	8002bf6 <sbrk_aligned+0x3a>
 8002bf2:	2501      	movs	r5, #1
 8002bf4:	426d      	negs	r5, r5
 8002bf6:	0028      	movs	r0, r5
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	20000240 	.word	0x20000240

08002c00 <_malloc_r>:
 8002c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c02:	2203      	movs	r2, #3
 8002c04:	1ccb      	adds	r3, r1, #3
 8002c06:	4393      	bics	r3, r2
 8002c08:	3308      	adds	r3, #8
 8002c0a:	0006      	movs	r6, r0
 8002c0c:	001f      	movs	r7, r3
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d232      	bcs.n	8002c78 <_malloc_r+0x78>
 8002c12:	270c      	movs	r7, #12
 8002c14:	42b9      	cmp	r1, r7
 8002c16:	d831      	bhi.n	8002c7c <_malloc_r+0x7c>
 8002c18:	0030      	movs	r0, r6
 8002c1a:	f000 f8a9 	bl	8002d70 <__malloc_lock>
 8002c1e:	4d32      	ldr	r5, [pc, #200]	; (8002ce8 <_malloc_r+0xe8>)
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	001c      	movs	r4, r3
 8002c24:	2c00      	cmp	r4, #0
 8002c26:	d12e      	bne.n	8002c86 <_malloc_r+0x86>
 8002c28:	0039      	movs	r1, r7
 8002c2a:	0030      	movs	r0, r6
 8002c2c:	f7ff ffc6 	bl	8002bbc <sbrk_aligned>
 8002c30:	0004      	movs	r4, r0
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d11e      	bne.n	8002c74 <_malloc_r+0x74>
 8002c36:	682c      	ldr	r4, [r5, #0]
 8002c38:	0025      	movs	r5, r4
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d14a      	bne.n	8002cd4 <_malloc_r+0xd4>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	0029      	movs	r1, r5
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	0030      	movs	r0, r6
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	f000 f880 	bl	8002d4c <_sbrk_r>
 8002c4c:	9b01      	ldr	r3, [sp, #4]
 8002c4e:	4283      	cmp	r3, r0
 8002c50:	d143      	bne.n	8002cda <_malloc_r+0xda>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	3703      	adds	r7, #3
 8002c56:	1aff      	subs	r7, r7, r3
 8002c58:	2303      	movs	r3, #3
 8002c5a:	439f      	bics	r7, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	2f0c      	cmp	r7, #12
 8002c60:	d200      	bcs.n	8002c64 <_malloc_r+0x64>
 8002c62:	270c      	movs	r7, #12
 8002c64:	0039      	movs	r1, r7
 8002c66:	0030      	movs	r0, r6
 8002c68:	f7ff ffa8 	bl	8002bbc <sbrk_aligned>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d034      	beq.n	8002cda <_malloc_r+0xda>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	19df      	adds	r7, r3, r7
 8002c74:	6027      	str	r7, [r4, #0]
 8002c76:	e013      	b.n	8002ca0 <_malloc_r+0xa0>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dacb      	bge.n	8002c14 <_malloc_r+0x14>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	2500      	movs	r5, #0
 8002c80:	6033      	str	r3, [r6, #0]
 8002c82:	0028      	movs	r0, r5
 8002c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	1bd1      	subs	r1, r2, r7
 8002c8a:	d420      	bmi.n	8002cce <_malloc_r+0xce>
 8002c8c:	290b      	cmp	r1, #11
 8002c8e:	d917      	bls.n	8002cc0 <_malloc_r+0xc0>
 8002c90:	19e2      	adds	r2, r4, r7
 8002c92:	6027      	str	r7, [r4, #0]
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	d111      	bne.n	8002cbc <_malloc_r+0xbc>
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	6863      	ldr	r3, [r4, #4]
 8002c9c:	6011      	str	r1, [r2, #0]
 8002c9e:	6053      	str	r3, [r2, #4]
 8002ca0:	0030      	movs	r0, r6
 8002ca2:	0025      	movs	r5, r4
 8002ca4:	f000 f86c 	bl	8002d80 <__malloc_unlock>
 8002ca8:	2207      	movs	r2, #7
 8002caa:	350b      	adds	r5, #11
 8002cac:	1d23      	adds	r3, r4, #4
 8002cae:	4395      	bics	r5, r2
 8002cb0:	1aea      	subs	r2, r5, r3
 8002cb2:	429d      	cmp	r5, r3
 8002cb4:	d0e5      	beq.n	8002c82 <_malloc_r+0x82>
 8002cb6:	1b5b      	subs	r3, r3, r5
 8002cb8:	50a3      	str	r3, [r4, r2]
 8002cba:	e7e2      	b.n	8002c82 <_malloc_r+0x82>
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	e7ec      	b.n	8002c9a <_malloc_r+0x9a>
 8002cc0:	6862      	ldr	r2, [r4, #4]
 8002cc2:	42a3      	cmp	r3, r4
 8002cc4:	d101      	bne.n	8002cca <_malloc_r+0xca>
 8002cc6:	602a      	str	r2, [r5, #0]
 8002cc8:	e7ea      	b.n	8002ca0 <_malloc_r+0xa0>
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	e7e8      	b.n	8002ca0 <_malloc_r+0xa0>
 8002cce:	0023      	movs	r3, r4
 8002cd0:	6864      	ldr	r4, [r4, #4]
 8002cd2:	e7a7      	b.n	8002c24 <_malloc_r+0x24>
 8002cd4:	002c      	movs	r4, r5
 8002cd6:	686d      	ldr	r5, [r5, #4]
 8002cd8:	e7af      	b.n	8002c3a <_malloc_r+0x3a>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	0030      	movs	r0, r6
 8002cde:	6033      	str	r3, [r6, #0]
 8002ce0:	f000 f84e 	bl	8002d80 <__malloc_unlock>
 8002ce4:	e7cd      	b.n	8002c82 <_malloc_r+0x82>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	2000023c 	.word	0x2000023c

08002cec <_realloc_r>:
 8002cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cee:	0007      	movs	r7, r0
 8002cf0:	000e      	movs	r6, r1
 8002cf2:	0014      	movs	r4, r2
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	d105      	bne.n	8002d04 <_realloc_r+0x18>
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	f7ff ff81 	bl	8002c00 <_malloc_r>
 8002cfe:	0005      	movs	r5, r0
 8002d00:	0028      	movs	r0, r5
 8002d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d103      	bne.n	8002d10 <_realloc_r+0x24>
 8002d08:	f7ff ff0e 	bl	8002b28 <_free_r>
 8002d0c:	0025      	movs	r5, r4
 8002d0e:	e7f7      	b.n	8002d00 <_realloc_r+0x14>
 8002d10:	f000 f83e 	bl	8002d90 <_malloc_usable_size_r>
 8002d14:	9001      	str	r0, [sp, #4]
 8002d16:	4284      	cmp	r4, r0
 8002d18:	d803      	bhi.n	8002d22 <_realloc_r+0x36>
 8002d1a:	0035      	movs	r5, r6
 8002d1c:	0843      	lsrs	r3, r0, #1
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	d3ee      	bcc.n	8002d00 <_realloc_r+0x14>
 8002d22:	0021      	movs	r1, r4
 8002d24:	0038      	movs	r0, r7
 8002d26:	f7ff ff6b 	bl	8002c00 <_malloc_r>
 8002d2a:	1e05      	subs	r5, r0, #0
 8002d2c:	d0e8      	beq.n	8002d00 <_realloc_r+0x14>
 8002d2e:	9b01      	ldr	r3, [sp, #4]
 8002d30:	0022      	movs	r2, r4
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d900      	bls.n	8002d38 <_realloc_r+0x4c>
 8002d36:	001a      	movs	r2, r3
 8002d38:	0031      	movs	r1, r6
 8002d3a:	0028      	movs	r0, r5
 8002d3c:	f7ff fbc0 	bl	80024c0 <memcpy>
 8002d40:	0031      	movs	r1, r6
 8002d42:	0038      	movs	r0, r7
 8002d44:	f7ff fef0 	bl	8002b28 <_free_r>
 8002d48:	e7da      	b.n	8002d00 <_realloc_r+0x14>
	...

08002d4c <_sbrk_r>:
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	b570      	push	{r4, r5, r6, lr}
 8002d50:	4d06      	ldr	r5, [pc, #24]	; (8002d6c <_sbrk_r+0x20>)
 8002d52:	0004      	movs	r4, r0
 8002d54:	0008      	movs	r0, r1
 8002d56:	602b      	str	r3, [r5, #0]
 8002d58:	f7fd fdfa 	bl	8000950 <_sbrk>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_sbrk_r+0x1c>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d000      	beq.n	8002d68 <_sbrk_r+0x1c>
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000244 	.word	0x20000244

08002d70 <__malloc_lock>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <__malloc_lock+0xc>)
 8002d74:	f000 f814 	bl	8002da0 <__retarget_lock_acquire_recursive>
 8002d78:	bd10      	pop	{r4, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	20000248 	.word	0x20000248

08002d80 <__malloc_unlock>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	4802      	ldr	r0, [pc, #8]	; (8002d8c <__malloc_unlock+0xc>)
 8002d84:	f000 f80d 	bl	8002da2 <__retarget_lock_release_recursive>
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000248 	.word	0x20000248

08002d90 <_malloc_usable_size_r>:
 8002d90:	1f0b      	subs	r3, r1, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1f18      	subs	r0, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da01      	bge.n	8002d9e <_malloc_usable_size_r+0xe>
 8002d9a:	580b      	ldr	r3, [r1, r0]
 8002d9c:	18c0      	adds	r0, r0, r3
 8002d9e:	4770      	bx	lr

08002da0 <__retarget_lock_acquire_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_release_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
